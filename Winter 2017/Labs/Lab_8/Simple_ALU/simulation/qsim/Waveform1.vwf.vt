// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/26/2017 14:55:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Simple_ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Simple_ALU_vlg_sample_tst(
	ALUControl,
	inputA,
	inputB,
	sampler_tx
);
input [1:0] ALUControl;
input [31:0] inputA;
input [31:0] inputB;
output sampler_tx;

reg sample;
time current_time;
always @(ALUControl or inputA or inputB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Simple_ALU_vlg_check_tst (
	ALU_Reult,
	sampler_rx
);
input [31:0] ALU_Reult;
input sampler_rx;

reg [31:0] ALU_Reult_expected;

reg [31:0] ALU_Reult_prev;

reg [31:0] ALU_Reult_expected_prev;

reg [31:0] last_ALU_Reult_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_Reult_prev = ALU_Reult;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_Reult_expected_prev = ALU_Reult_expected;
end


// expected ALU_Reult[ 31 ]
initial
begin
	ALU_Reult_expected[31] = 1'bX;
end 
// expected ALU_Reult[ 30 ]
initial
begin
	ALU_Reult_expected[30] = 1'bX;
end 
// expected ALU_Reult[ 29 ]
initial
begin
	ALU_Reult_expected[29] = 1'bX;
end 
// expected ALU_Reult[ 28 ]
initial
begin
	ALU_Reult_expected[28] = 1'bX;
end 
// expected ALU_Reult[ 27 ]
initial
begin
	ALU_Reult_expected[27] = 1'bX;
end 
// expected ALU_Reult[ 26 ]
initial
begin
	ALU_Reult_expected[26] = 1'bX;
end 
// expected ALU_Reult[ 25 ]
initial
begin
	ALU_Reult_expected[25] = 1'bX;
end 
// expected ALU_Reult[ 24 ]
initial
begin
	ALU_Reult_expected[24] = 1'bX;
end 
// expected ALU_Reult[ 23 ]
initial
begin
	ALU_Reult_expected[23] = 1'bX;
end 
// expected ALU_Reult[ 22 ]
initial
begin
	ALU_Reult_expected[22] = 1'bX;
end 
// expected ALU_Reult[ 21 ]
initial
begin
	ALU_Reult_expected[21] = 1'bX;
end 
// expected ALU_Reult[ 20 ]
initial
begin
	ALU_Reult_expected[20] = 1'bX;
end 
// expected ALU_Reult[ 19 ]
initial
begin
	ALU_Reult_expected[19] = 1'bX;
end 
// expected ALU_Reult[ 18 ]
initial
begin
	ALU_Reult_expected[18] = 1'bX;
end 
// expected ALU_Reult[ 17 ]
initial
begin
	ALU_Reult_expected[17] = 1'bX;
end 
// expected ALU_Reult[ 16 ]
initial
begin
	ALU_Reult_expected[16] = 1'bX;
end 
// expected ALU_Reult[ 15 ]
initial
begin
	ALU_Reult_expected[15] = 1'bX;
end 
// expected ALU_Reult[ 14 ]
initial
begin
	ALU_Reult_expected[14] = 1'bX;
end 
// expected ALU_Reult[ 13 ]
initial
begin
	ALU_Reult_expected[13] = 1'bX;
end 
// expected ALU_Reult[ 12 ]
initial
begin
	ALU_Reult_expected[12] = 1'bX;
end 
// expected ALU_Reult[ 11 ]
initial
begin
	ALU_Reult_expected[11] = 1'bX;
end 
// expected ALU_Reult[ 10 ]
initial
begin
	ALU_Reult_expected[10] = 1'bX;
end 
// expected ALU_Reult[ 9 ]
initial
begin
	ALU_Reult_expected[9] = 1'bX;
end 
// expected ALU_Reult[ 8 ]
initial
begin
	ALU_Reult_expected[8] = 1'bX;
end 
// expected ALU_Reult[ 7 ]
initial
begin
	ALU_Reult_expected[7] = 1'bX;
end 
// expected ALU_Reult[ 6 ]
initial
begin
	ALU_Reult_expected[6] = 1'bX;
end 
// expected ALU_Reult[ 5 ]
initial
begin
	ALU_Reult_expected[5] = 1'bX;
end 
// expected ALU_Reult[ 4 ]
initial
begin
	ALU_Reult_expected[4] = 1'bX;
end 
// expected ALU_Reult[ 3 ]
initial
begin
	ALU_Reult_expected[3] = 1'bX;
end 
// expected ALU_Reult[ 2 ]
initial
begin
	ALU_Reult_expected[2] = 1'bX;
end 
// expected ALU_Reult[ 1 ]
initial
begin
	ALU_Reult_expected[1] = 1'bX;
end 
// expected ALU_Reult[ 0 ]
initial
begin
	ALU_Reult_expected[0] = 1'bX;
end 
// generate trigger
always @(ALU_Reult_expected or ALU_Reult)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_Reult = %b | ",ALU_Reult_expected_prev);
	$display("| real ALU_Reult = %b | ",ALU_Reult_prev);
`endif
	if (
		( ALU_Reult_expected_prev[0] !== 1'bx ) && ( ALU_Reult_prev[0] !== ALU_Reult_expected_prev[0] )
		&& ((ALU_Reult_expected_prev[0] !== last_ALU_Reult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[0] = ALU_Reult_expected_prev[0];
	end
	if (
		( ALU_Reult_expected_prev[1] !== 1'bx ) && ( ALU_Reult_prev[1] !== ALU_Reult_expected_prev[1] )
		&& ((ALU_Reult_expected_prev[1] !== last_ALU_Reult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[1] = ALU_Reult_expected_prev[1];
	end
	if (
		( ALU_Reult_expected_prev[2] !== 1'bx ) && ( ALU_Reult_prev[2] !== ALU_Reult_expected_prev[2] )
		&& ((ALU_Reult_expected_prev[2] !== last_ALU_Reult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[2] = ALU_Reult_expected_prev[2];
	end
	if (
		( ALU_Reult_expected_prev[3] !== 1'bx ) && ( ALU_Reult_prev[3] !== ALU_Reult_expected_prev[3] )
		&& ((ALU_Reult_expected_prev[3] !== last_ALU_Reult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[3] = ALU_Reult_expected_prev[3];
	end
	if (
		( ALU_Reult_expected_prev[4] !== 1'bx ) && ( ALU_Reult_prev[4] !== ALU_Reult_expected_prev[4] )
		&& ((ALU_Reult_expected_prev[4] !== last_ALU_Reult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[4] = ALU_Reult_expected_prev[4];
	end
	if (
		( ALU_Reult_expected_prev[5] !== 1'bx ) && ( ALU_Reult_prev[5] !== ALU_Reult_expected_prev[5] )
		&& ((ALU_Reult_expected_prev[5] !== last_ALU_Reult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[5] = ALU_Reult_expected_prev[5];
	end
	if (
		( ALU_Reult_expected_prev[6] !== 1'bx ) && ( ALU_Reult_prev[6] !== ALU_Reult_expected_prev[6] )
		&& ((ALU_Reult_expected_prev[6] !== last_ALU_Reult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[6] = ALU_Reult_expected_prev[6];
	end
	if (
		( ALU_Reult_expected_prev[7] !== 1'bx ) && ( ALU_Reult_prev[7] !== ALU_Reult_expected_prev[7] )
		&& ((ALU_Reult_expected_prev[7] !== last_ALU_Reult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[7] = ALU_Reult_expected_prev[7];
	end
	if (
		( ALU_Reult_expected_prev[8] !== 1'bx ) && ( ALU_Reult_prev[8] !== ALU_Reult_expected_prev[8] )
		&& ((ALU_Reult_expected_prev[8] !== last_ALU_Reult_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[8] = ALU_Reult_expected_prev[8];
	end
	if (
		( ALU_Reult_expected_prev[9] !== 1'bx ) && ( ALU_Reult_prev[9] !== ALU_Reult_expected_prev[9] )
		&& ((ALU_Reult_expected_prev[9] !== last_ALU_Reult_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[9] = ALU_Reult_expected_prev[9];
	end
	if (
		( ALU_Reult_expected_prev[10] !== 1'bx ) && ( ALU_Reult_prev[10] !== ALU_Reult_expected_prev[10] )
		&& ((ALU_Reult_expected_prev[10] !== last_ALU_Reult_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[10] = ALU_Reult_expected_prev[10];
	end
	if (
		( ALU_Reult_expected_prev[11] !== 1'bx ) && ( ALU_Reult_prev[11] !== ALU_Reult_expected_prev[11] )
		&& ((ALU_Reult_expected_prev[11] !== last_ALU_Reult_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[11] = ALU_Reult_expected_prev[11];
	end
	if (
		( ALU_Reult_expected_prev[12] !== 1'bx ) && ( ALU_Reult_prev[12] !== ALU_Reult_expected_prev[12] )
		&& ((ALU_Reult_expected_prev[12] !== last_ALU_Reult_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[12] = ALU_Reult_expected_prev[12];
	end
	if (
		( ALU_Reult_expected_prev[13] !== 1'bx ) && ( ALU_Reult_prev[13] !== ALU_Reult_expected_prev[13] )
		&& ((ALU_Reult_expected_prev[13] !== last_ALU_Reult_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[13] = ALU_Reult_expected_prev[13];
	end
	if (
		( ALU_Reult_expected_prev[14] !== 1'bx ) && ( ALU_Reult_prev[14] !== ALU_Reult_expected_prev[14] )
		&& ((ALU_Reult_expected_prev[14] !== last_ALU_Reult_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[14] = ALU_Reult_expected_prev[14];
	end
	if (
		( ALU_Reult_expected_prev[15] !== 1'bx ) && ( ALU_Reult_prev[15] !== ALU_Reult_expected_prev[15] )
		&& ((ALU_Reult_expected_prev[15] !== last_ALU_Reult_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[15] = ALU_Reult_expected_prev[15];
	end
	if (
		( ALU_Reult_expected_prev[16] !== 1'bx ) && ( ALU_Reult_prev[16] !== ALU_Reult_expected_prev[16] )
		&& ((ALU_Reult_expected_prev[16] !== last_ALU_Reult_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[16] = ALU_Reult_expected_prev[16];
	end
	if (
		( ALU_Reult_expected_prev[17] !== 1'bx ) && ( ALU_Reult_prev[17] !== ALU_Reult_expected_prev[17] )
		&& ((ALU_Reult_expected_prev[17] !== last_ALU_Reult_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[17] = ALU_Reult_expected_prev[17];
	end
	if (
		( ALU_Reult_expected_prev[18] !== 1'bx ) && ( ALU_Reult_prev[18] !== ALU_Reult_expected_prev[18] )
		&& ((ALU_Reult_expected_prev[18] !== last_ALU_Reult_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[18] = ALU_Reult_expected_prev[18];
	end
	if (
		( ALU_Reult_expected_prev[19] !== 1'bx ) && ( ALU_Reult_prev[19] !== ALU_Reult_expected_prev[19] )
		&& ((ALU_Reult_expected_prev[19] !== last_ALU_Reult_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[19] = ALU_Reult_expected_prev[19];
	end
	if (
		( ALU_Reult_expected_prev[20] !== 1'bx ) && ( ALU_Reult_prev[20] !== ALU_Reult_expected_prev[20] )
		&& ((ALU_Reult_expected_prev[20] !== last_ALU_Reult_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[20] = ALU_Reult_expected_prev[20];
	end
	if (
		( ALU_Reult_expected_prev[21] !== 1'bx ) && ( ALU_Reult_prev[21] !== ALU_Reult_expected_prev[21] )
		&& ((ALU_Reult_expected_prev[21] !== last_ALU_Reult_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[21] = ALU_Reult_expected_prev[21];
	end
	if (
		( ALU_Reult_expected_prev[22] !== 1'bx ) && ( ALU_Reult_prev[22] !== ALU_Reult_expected_prev[22] )
		&& ((ALU_Reult_expected_prev[22] !== last_ALU_Reult_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[22] = ALU_Reult_expected_prev[22];
	end
	if (
		( ALU_Reult_expected_prev[23] !== 1'bx ) && ( ALU_Reult_prev[23] !== ALU_Reult_expected_prev[23] )
		&& ((ALU_Reult_expected_prev[23] !== last_ALU_Reult_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[23] = ALU_Reult_expected_prev[23];
	end
	if (
		( ALU_Reult_expected_prev[24] !== 1'bx ) && ( ALU_Reult_prev[24] !== ALU_Reult_expected_prev[24] )
		&& ((ALU_Reult_expected_prev[24] !== last_ALU_Reult_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[24] = ALU_Reult_expected_prev[24];
	end
	if (
		( ALU_Reult_expected_prev[25] !== 1'bx ) && ( ALU_Reult_prev[25] !== ALU_Reult_expected_prev[25] )
		&& ((ALU_Reult_expected_prev[25] !== last_ALU_Reult_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[25] = ALU_Reult_expected_prev[25];
	end
	if (
		( ALU_Reult_expected_prev[26] !== 1'bx ) && ( ALU_Reult_prev[26] !== ALU_Reult_expected_prev[26] )
		&& ((ALU_Reult_expected_prev[26] !== last_ALU_Reult_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[26] = ALU_Reult_expected_prev[26];
	end
	if (
		( ALU_Reult_expected_prev[27] !== 1'bx ) && ( ALU_Reult_prev[27] !== ALU_Reult_expected_prev[27] )
		&& ((ALU_Reult_expected_prev[27] !== last_ALU_Reult_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[27] = ALU_Reult_expected_prev[27];
	end
	if (
		( ALU_Reult_expected_prev[28] !== 1'bx ) && ( ALU_Reult_prev[28] !== ALU_Reult_expected_prev[28] )
		&& ((ALU_Reult_expected_prev[28] !== last_ALU_Reult_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[28] = ALU_Reult_expected_prev[28];
	end
	if (
		( ALU_Reult_expected_prev[29] !== 1'bx ) && ( ALU_Reult_prev[29] !== ALU_Reult_expected_prev[29] )
		&& ((ALU_Reult_expected_prev[29] !== last_ALU_Reult_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[29] = ALU_Reult_expected_prev[29];
	end
	if (
		( ALU_Reult_expected_prev[30] !== 1'bx ) && ( ALU_Reult_prev[30] !== ALU_Reult_expected_prev[30] )
		&& ((ALU_Reult_expected_prev[30] !== last_ALU_Reult_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[30] = ALU_Reult_expected_prev[30];
	end
	if (
		( ALU_Reult_expected_prev[31] !== 1'bx ) && ( ALU_Reult_prev[31] !== ALU_Reult_expected_prev[31] )
		&& ((ALU_Reult_expected_prev[31] !== last_ALU_Reult_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Reult[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Reult_expected_prev);
		$display ("     Real value = %b", ALU_Reult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Reult_exp[31] = ALU_Reult_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Simple_ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] ALUControl;
reg [31:0] inputA;
reg [31:0] inputB;
// wires                                               
wire [31:0] ALU_Reult;

wire sampler;                             

// assign statements (if any)                          
Simple_ALU i1 (
// port map - connection between master ports and signals/registers   
	.ALU_Reult(ALU_Reult),
	.ALUControl(ALUControl),
	.inputA(inputA),
	.inputB(inputB)
);
// ALUControl[ 1 ]
initial
begin
	ALUControl[1] = 1'b1;
end 
// ALUControl[ 0 ]
initial
begin
	ALUControl[0] = 1'b0;
end 
// inputA[ 31 ]
initial
begin
	inputA[31] = 1'b1;
end 
// inputA[ 30 ]
initial
begin
	inputA[30] = 1'b1;
end 
// inputA[ 29 ]
initial
begin
	inputA[29] = 1'b1;
end 
// inputA[ 28 ]
initial
begin
	inputA[28] = 1'b1;
end 
// inputA[ 27 ]
initial
begin
	inputA[27] = 1'b1;
end 
// inputA[ 26 ]
initial
begin
	inputA[26] = 1'b1;
end 
// inputA[ 25 ]
initial
begin
	inputA[25] = 1'b1;
end 
// inputA[ 24 ]
initial
begin
	inputA[24] = 1'b1;
end 
// inputA[ 23 ]
initial
begin
	inputA[23] = 1'b1;
end 
// inputA[ 22 ]
initial
begin
	inputA[22] = 1'b1;
end 
// inputA[ 21 ]
initial
begin
	inputA[21] = 1'b1;
end 
// inputA[ 20 ]
initial
begin
	inputA[20] = 1'b1;
end 
// inputA[ 19 ]
initial
begin
	inputA[19] = 1'b1;
end 
// inputA[ 18 ]
initial
begin
	inputA[18] = 1'b1;
end 
// inputA[ 17 ]
initial
begin
	inputA[17] = 1'b1;
end 
// inputA[ 16 ]
initial
begin
	inputA[16] = 1'b1;
end 
// inputA[ 15 ]
initial
begin
	inputA[15] = 1'b1;
end 
// inputA[ 14 ]
initial
begin
	inputA[14] = 1'b1;
end 
// inputA[ 13 ]
initial
begin
	inputA[13] = 1'b1;
end 
// inputA[ 12 ]
initial
begin
	inputA[12] = 1'b1;
end 
// inputA[ 11 ]
initial
begin
	inputA[11] = 1'b1;
end 
// inputA[ 10 ]
initial
begin
	inputA[10] = 1'b1;
end 
// inputA[ 9 ]
initial
begin
	inputA[9] = 1'b1;
end 
// inputA[ 8 ]
initial
begin
	inputA[8] = 1'b1;
end 
// inputA[ 7 ]
initial
begin
	inputA[7] = 1'b1;
end 
// inputA[ 6 ]
initial
begin
	inputA[6] = 1'b1;
end 
// inputA[ 5 ]
initial
begin
	inputA[5] = 1'b1;
end 
// inputA[ 4 ]
initial
begin
	inputA[4] = 1'b1;
end 
// inputA[ 3 ]
initial
begin
	inputA[3] = 1'b1;
end 
// inputA[ 2 ]
initial
begin
	inputA[2] = 1'b1;
end 
// inputA[ 1 ]
initial
begin
	inputA[1] = 1'b1;
end 
// inputA[ 0 ]
initial
begin
	inputA[0] = 1'b1;
end 
// inputB[ 31 ]
initial
begin
	inputB[31] = 1'b1;
end 
// inputB[ 30 ]
initial
begin
	inputB[30] = 1'b1;
end 
// inputB[ 29 ]
initial
begin
	inputB[29] = 1'b1;
end 
// inputB[ 28 ]
initial
begin
	inputB[28] = 1'b1;
end 
// inputB[ 27 ]
initial
begin
	inputB[27] = 1'b1;
end 
// inputB[ 26 ]
initial
begin
	inputB[26] = 1'b1;
end 
// inputB[ 25 ]
initial
begin
	inputB[25] = 1'b1;
end 
// inputB[ 24 ]
initial
begin
	inputB[24] = 1'b1;
end 
// inputB[ 23 ]
initial
begin
	inputB[23] = 1'b1;
end 
// inputB[ 22 ]
initial
begin
	inputB[22] = 1'b1;
end 
// inputB[ 21 ]
initial
begin
	inputB[21] = 1'b1;
end 
// inputB[ 20 ]
initial
begin
	inputB[20] = 1'b1;
end 
// inputB[ 19 ]
initial
begin
	inputB[19] = 1'b1;
end 
// inputB[ 18 ]
initial
begin
	inputB[18] = 1'b1;
end 
// inputB[ 17 ]
initial
begin
	inputB[17] = 1'b1;
end 
// inputB[ 16 ]
initial
begin
	inputB[16] = 1'b1;
end 
// inputB[ 15 ]
initial
begin
	inputB[15] = 1'b1;
end 
// inputB[ 14 ]
initial
begin
	inputB[14] = 1'b1;
end 
// inputB[ 13 ]
initial
begin
	inputB[13] = 1'b1;
end 
// inputB[ 12 ]
initial
begin
	inputB[12] = 1'b1;
end 
// inputB[ 11 ]
initial
begin
	inputB[11] = 1'b1;
end 
// inputB[ 10 ]
initial
begin
	inputB[10] = 1'b1;
end 
// inputB[ 9 ]
initial
begin
	inputB[9] = 1'b1;
end 
// inputB[ 8 ]
initial
begin
	inputB[8] = 1'b1;
end 
// inputB[ 7 ]
initial
begin
	inputB[7] = 1'b1;
end 
// inputB[ 6 ]
initial
begin
	inputB[6] = 1'b1;
end 
// inputB[ 5 ]
initial
begin
	inputB[5] = 1'b1;
end 
// inputB[ 4 ]
initial
begin
	inputB[4] = 1'b1;
end 
// inputB[ 3 ]
initial
begin
	inputB[3] = 1'b1;
end 
// inputB[ 2 ]
initial
begin
	inputB[2] = 1'b1;
end 
// inputB[ 1 ]
initial
begin
	inputB[1] = 1'b1;
end 
// inputB[ 0 ]
initial
begin
	inputB[0] = 1'b1;
end 

Simple_ALU_vlg_sample_tst tb_sample (
	.ALUControl(ALUControl),
	.inputA(inputA),
	.inputB(inputB),
	.sampler_tx(sampler)
);

Simple_ALU_vlg_check_tst tb_out(
	.ALU_Reult(ALU_Reult),
	.sampler_rx(sampler)
);
endmodule

