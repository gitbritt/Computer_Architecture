// unsaved_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module unsaved_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                             //                           clk_0_clk.clk
		input  wire        ext_bus_reset_reset_bridge_in_reset_reset, // ext_bus_reset_reset_bridge_in_reset.reset
		input  wire [11:0] ext_bus_avalon_master_address,             //               ext_bus_avalon_master.address
		output wire        ext_bus_avalon_master_waitrequest,         //                                    .waitrequest
		input  wire [1:0]  ext_bus_avalon_master_byteenable,          //                                    .byteenable
		input  wire        ext_bus_avalon_master_read,                //                                    .read
		output wire [15:0] ext_bus_avalon_master_readdata,            //                                    .readdata
		input  wire        ext_bus_avalon_master_write,               //                                    .write
		input  wire [15:0] ext_bus_avalon_master_writedata,           //                                    .writedata
		output wire [1:0]  flash_ctl_address,                         //                           flash_ctl.address
		output wire        flash_ctl_write,                           //                                    .write
		output wire        flash_ctl_read,                            //                                    .read
		input  wire [3:0]  flash_ctl_readdata,                        //                                    .readdata
		output wire [3:0]  flash_ctl_writedata,                       //                                    .writedata
		output wire        flash_ctl_chipselect,                      //                                    .chipselect
		output wire [3:0]  flash_ide_address,                         //                           flash_ide.address
		output wire        flash_ide_write,                           //                                    .write
		output wire        flash_ide_read,                            //                                    .read
		input  wire [15:0] flash_ide_readdata,                        //                                    .readdata
		output wire [15:0] flash_ide_writedata,                       //                                    .writedata
		output wire        flash_ide_chipselect                       //                                    .chipselect
	);

	wire         ext_bus_avalon_master_translator_avalon_universal_master_0_waitrequest;   // ext_bus_avalon_master_agent:av_waitrequest -> ext_bus_avalon_master_translator:uav_waitrequest
	wire  [15:0] ext_bus_avalon_master_translator_avalon_universal_master_0_readdata;      // ext_bus_avalon_master_agent:av_readdata -> ext_bus_avalon_master_translator:uav_readdata
	wire         ext_bus_avalon_master_translator_avalon_universal_master_0_debugaccess;   // ext_bus_avalon_master_translator:uav_debugaccess -> ext_bus_avalon_master_agent:av_debugaccess
	wire  [11:0] ext_bus_avalon_master_translator_avalon_universal_master_0_address;       // ext_bus_avalon_master_translator:uav_address -> ext_bus_avalon_master_agent:av_address
	wire         ext_bus_avalon_master_translator_avalon_universal_master_0_read;          // ext_bus_avalon_master_translator:uav_read -> ext_bus_avalon_master_agent:av_read
	wire   [1:0] ext_bus_avalon_master_translator_avalon_universal_master_0_byteenable;    // ext_bus_avalon_master_translator:uav_byteenable -> ext_bus_avalon_master_agent:av_byteenable
	wire         ext_bus_avalon_master_translator_avalon_universal_master_0_readdatavalid; // ext_bus_avalon_master_agent:av_readdatavalid -> ext_bus_avalon_master_translator:uav_readdatavalid
	wire         ext_bus_avalon_master_translator_avalon_universal_master_0_lock;          // ext_bus_avalon_master_translator:uav_lock -> ext_bus_avalon_master_agent:av_lock
	wire         ext_bus_avalon_master_translator_avalon_universal_master_0_write;         // ext_bus_avalon_master_translator:uav_write -> ext_bus_avalon_master_agent:av_write
	wire  [15:0] ext_bus_avalon_master_translator_avalon_universal_master_0_writedata;     // ext_bus_avalon_master_translator:uav_writedata -> ext_bus_avalon_master_agent:av_writedata
	wire   [1:0] ext_bus_avalon_master_translator_avalon_universal_master_0_burstcount;    // ext_bus_avalon_master_translator:uav_burstcount -> ext_bus_avalon_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> ext_bus_avalon_master_agent:rp_valid
	wire  [63:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> ext_bus_avalon_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                        // ext_bus_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> ext_bus_avalon_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> ext_bus_avalon_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> ext_bus_avalon_master_agent:rp_endofpacket
	wire  [31:0] flash_ctl_agent_m0_readdata;                                              // flash_ctl_translator:uav_readdata -> flash_ctl_agent:m0_readdata
	wire         flash_ctl_agent_m0_waitrequest;                                           // flash_ctl_translator:uav_waitrequest -> flash_ctl_agent:m0_waitrequest
	wire         flash_ctl_agent_m0_debugaccess;                                           // flash_ctl_agent:m0_debugaccess -> flash_ctl_translator:uav_debugaccess
	wire  [11:0] flash_ctl_agent_m0_address;                                               // flash_ctl_agent:m0_address -> flash_ctl_translator:uav_address
	wire   [3:0] flash_ctl_agent_m0_byteenable;                                            // flash_ctl_agent:m0_byteenable -> flash_ctl_translator:uav_byteenable
	wire         flash_ctl_agent_m0_read;                                                  // flash_ctl_agent:m0_read -> flash_ctl_translator:uav_read
	wire         flash_ctl_agent_m0_readdatavalid;                                         // flash_ctl_translator:uav_readdatavalid -> flash_ctl_agent:m0_readdatavalid
	wire         flash_ctl_agent_m0_lock;                                                  // flash_ctl_agent:m0_lock -> flash_ctl_translator:uav_lock
	wire  [31:0] flash_ctl_agent_m0_writedata;                                             // flash_ctl_agent:m0_writedata -> flash_ctl_translator:uav_writedata
	wire         flash_ctl_agent_m0_write;                                                 // flash_ctl_agent:m0_write -> flash_ctl_translator:uav_write
	wire   [2:0] flash_ctl_agent_m0_burstcount;                                            // flash_ctl_agent:m0_burstcount -> flash_ctl_translator:uav_burstcount
	wire         flash_ctl_agent_rf_source_valid;                                          // flash_ctl_agent:rf_source_valid -> flash_ctl_agent_rsp_fifo:in_valid
	wire  [82:0] flash_ctl_agent_rf_source_data;                                           // flash_ctl_agent:rf_source_data -> flash_ctl_agent_rsp_fifo:in_data
	wire         flash_ctl_agent_rf_source_ready;                                          // flash_ctl_agent_rsp_fifo:in_ready -> flash_ctl_agent:rf_source_ready
	wire         flash_ctl_agent_rf_source_startofpacket;                                  // flash_ctl_agent:rf_source_startofpacket -> flash_ctl_agent_rsp_fifo:in_startofpacket
	wire         flash_ctl_agent_rf_source_endofpacket;                                    // flash_ctl_agent:rf_source_endofpacket -> flash_ctl_agent_rsp_fifo:in_endofpacket
	wire         flash_ctl_agent_rsp_fifo_out_valid;                                       // flash_ctl_agent_rsp_fifo:out_valid -> flash_ctl_agent:rf_sink_valid
	wire  [82:0] flash_ctl_agent_rsp_fifo_out_data;                                        // flash_ctl_agent_rsp_fifo:out_data -> flash_ctl_agent:rf_sink_data
	wire         flash_ctl_agent_rsp_fifo_out_ready;                                       // flash_ctl_agent:rf_sink_ready -> flash_ctl_agent_rsp_fifo:out_ready
	wire         flash_ctl_agent_rsp_fifo_out_startofpacket;                               // flash_ctl_agent_rsp_fifo:out_startofpacket -> flash_ctl_agent:rf_sink_startofpacket
	wire         flash_ctl_agent_rsp_fifo_out_endofpacket;                                 // flash_ctl_agent_rsp_fifo:out_endofpacket -> flash_ctl_agent:rf_sink_endofpacket
	wire  [31:0] flash_ide_agent_m0_readdata;                                              // flash_ide_translator:uav_readdata -> flash_ide_agent:m0_readdata
	wire         flash_ide_agent_m0_waitrequest;                                           // flash_ide_translator:uav_waitrequest -> flash_ide_agent:m0_waitrequest
	wire         flash_ide_agent_m0_debugaccess;                                           // flash_ide_agent:m0_debugaccess -> flash_ide_translator:uav_debugaccess
	wire  [11:0] flash_ide_agent_m0_address;                                               // flash_ide_agent:m0_address -> flash_ide_translator:uav_address
	wire   [3:0] flash_ide_agent_m0_byteenable;                                            // flash_ide_agent:m0_byteenable -> flash_ide_translator:uav_byteenable
	wire         flash_ide_agent_m0_read;                                                  // flash_ide_agent:m0_read -> flash_ide_translator:uav_read
	wire         flash_ide_agent_m0_readdatavalid;                                         // flash_ide_translator:uav_readdatavalid -> flash_ide_agent:m0_readdatavalid
	wire         flash_ide_agent_m0_lock;                                                  // flash_ide_agent:m0_lock -> flash_ide_translator:uav_lock
	wire  [31:0] flash_ide_agent_m0_writedata;                                             // flash_ide_agent:m0_writedata -> flash_ide_translator:uav_writedata
	wire         flash_ide_agent_m0_write;                                                 // flash_ide_agent:m0_write -> flash_ide_translator:uav_write
	wire   [2:0] flash_ide_agent_m0_burstcount;                                            // flash_ide_agent:m0_burstcount -> flash_ide_translator:uav_burstcount
	wire         flash_ide_agent_rf_source_valid;                                          // flash_ide_agent:rf_source_valid -> flash_ide_agent_rsp_fifo:in_valid
	wire  [82:0] flash_ide_agent_rf_source_data;                                           // flash_ide_agent:rf_source_data -> flash_ide_agent_rsp_fifo:in_data
	wire         flash_ide_agent_rf_source_ready;                                          // flash_ide_agent_rsp_fifo:in_ready -> flash_ide_agent:rf_source_ready
	wire         flash_ide_agent_rf_source_startofpacket;                                  // flash_ide_agent:rf_source_startofpacket -> flash_ide_agent_rsp_fifo:in_startofpacket
	wire         flash_ide_agent_rf_source_endofpacket;                                    // flash_ide_agent:rf_source_endofpacket -> flash_ide_agent_rsp_fifo:in_endofpacket
	wire         flash_ide_agent_rsp_fifo_out_valid;                                       // flash_ide_agent_rsp_fifo:out_valid -> flash_ide_agent:rf_sink_valid
	wire  [82:0] flash_ide_agent_rsp_fifo_out_data;                                        // flash_ide_agent_rsp_fifo:out_data -> flash_ide_agent:rf_sink_data
	wire         flash_ide_agent_rsp_fifo_out_ready;                                       // flash_ide_agent:rf_sink_ready -> flash_ide_agent_rsp_fifo:out_ready
	wire         flash_ide_agent_rsp_fifo_out_startofpacket;                               // flash_ide_agent_rsp_fifo:out_startofpacket -> flash_ide_agent:rf_sink_startofpacket
	wire         flash_ide_agent_rsp_fifo_out_endofpacket;                                 // flash_ide_agent_rsp_fifo:out_endofpacket -> flash_ide_agent:rf_sink_endofpacket
	wire         ext_bus_avalon_master_agent_cp_valid;                                     // ext_bus_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [63:0] ext_bus_avalon_master_agent_cp_data;                                      // ext_bus_avalon_master_agent:cp_data -> router:sink_data
	wire         ext_bus_avalon_master_agent_cp_ready;                                     // router:sink_ready -> ext_bus_avalon_master_agent:cp_ready
	wire         ext_bus_avalon_master_agent_cp_startofpacket;                             // ext_bus_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         ext_bus_avalon_master_agent_cp_endofpacket;                               // ext_bus_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                         // router:src_valid -> cmd_demux:sink_valid
	wire  [63:0] router_src_data;                                                          // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                         // cmd_demux:sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                       // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                 // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                   // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         flash_ctl_agent_rp_valid;                                                 // flash_ctl_agent:rp_valid -> router_001:sink_valid
	wire  [81:0] flash_ctl_agent_rp_data;                                                  // flash_ctl_agent:rp_data -> router_001:sink_data
	wire         flash_ctl_agent_rp_ready;                                                 // router_001:sink_ready -> flash_ctl_agent:rp_ready
	wire         flash_ctl_agent_rp_startofpacket;                                         // flash_ctl_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         flash_ctl_agent_rp_endofpacket;                                           // flash_ctl_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         flash_ide_agent_rp_valid;                                                 // flash_ide_agent:rp_valid -> router_002:sink_valid
	wire  [81:0] flash_ide_agent_rp_data;                                                  // flash_ide_agent:rp_data -> router_002:sink_data
	wire         flash_ide_agent_rp_ready;                                                 // router_002:sink_ready -> flash_ide_agent:rp_ready
	wire         flash_ide_agent_rp_startofpacket;                                         // flash_ide_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         flash_ide_agent_rp_endofpacket;                                           // flash_ide_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [63:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                     // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                     // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [63:0] cmd_demux_src1_data;                                                      // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                     // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [1:0] cmd_demux_src1_channel;                                                   // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                             // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                               // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [63:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                     // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                 // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [63:0] rsp_demux_001_src0_data;                                                  // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                 // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [1:0] rsp_demux_001_src0_channel;                                               // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                         // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                           // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> flash_ctl_cmd_width_adapter:in_valid
	wire  [63:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> flash_ctl_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                        // flash_ctl_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> flash_ctl_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> flash_ctl_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> flash_ctl_cmd_width_adapter:in_endofpacket
	wire         flash_ctl_cmd_width_adapter_src_valid;                                    // flash_ctl_cmd_width_adapter:out_valid -> flash_ctl_agent:cp_valid
	wire  [81:0] flash_ctl_cmd_width_adapter_src_data;                                     // flash_ctl_cmd_width_adapter:out_data -> flash_ctl_agent:cp_data
	wire         flash_ctl_cmd_width_adapter_src_ready;                                    // flash_ctl_agent:cp_ready -> flash_ctl_cmd_width_adapter:out_ready
	wire   [1:0] flash_ctl_cmd_width_adapter_src_channel;                                  // flash_ctl_cmd_width_adapter:out_channel -> flash_ctl_agent:cp_channel
	wire         flash_ctl_cmd_width_adapter_src_startofpacket;                            // flash_ctl_cmd_width_adapter:out_startofpacket -> flash_ctl_agent:cp_startofpacket
	wire         flash_ctl_cmd_width_adapter_src_endofpacket;                              // flash_ctl_cmd_width_adapter:out_endofpacket -> flash_ctl_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                    // cmd_mux_001:src_valid -> flash_ide_cmd_width_adapter:in_valid
	wire  [63:0] cmd_mux_001_src_data;                                                     // cmd_mux_001:src_data -> flash_ide_cmd_width_adapter:in_data
	wire         cmd_mux_001_src_ready;                                                    // flash_ide_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [1:0] cmd_mux_001_src_channel;                                                  // cmd_mux_001:src_channel -> flash_ide_cmd_width_adapter:in_channel
	wire         cmd_mux_001_src_startofpacket;                                            // cmd_mux_001:src_startofpacket -> flash_ide_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                              // cmd_mux_001:src_endofpacket -> flash_ide_cmd_width_adapter:in_endofpacket
	wire         flash_ide_cmd_width_adapter_src_valid;                                    // flash_ide_cmd_width_adapter:out_valid -> flash_ide_agent:cp_valid
	wire  [81:0] flash_ide_cmd_width_adapter_src_data;                                     // flash_ide_cmd_width_adapter:out_data -> flash_ide_agent:cp_data
	wire         flash_ide_cmd_width_adapter_src_ready;                                    // flash_ide_agent:cp_ready -> flash_ide_cmd_width_adapter:out_ready
	wire   [1:0] flash_ide_cmd_width_adapter_src_channel;                                  // flash_ide_cmd_width_adapter:out_channel -> flash_ide_agent:cp_channel
	wire         flash_ide_cmd_width_adapter_src_startofpacket;                            // flash_ide_cmd_width_adapter:out_startofpacket -> flash_ide_agent:cp_startofpacket
	wire         flash_ide_cmd_width_adapter_src_endofpacket;                              // flash_ide_cmd_width_adapter:out_endofpacket -> flash_ide_agent:cp_endofpacket
	wire         router_001_src_valid;                                                     // router_001:src_valid -> flash_ctl_rsp_width_adapter:in_valid
	wire  [81:0] router_001_src_data;                                                      // router_001:src_data -> flash_ctl_rsp_width_adapter:in_data
	wire         router_001_src_ready;                                                     // flash_ctl_rsp_width_adapter:in_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                                   // router_001:src_channel -> flash_ctl_rsp_width_adapter:in_channel
	wire         router_001_src_startofpacket;                                             // router_001:src_startofpacket -> flash_ctl_rsp_width_adapter:in_startofpacket
	wire         router_001_src_endofpacket;                                               // router_001:src_endofpacket -> flash_ctl_rsp_width_adapter:in_endofpacket
	wire         flash_ctl_rsp_width_adapter_src_valid;                                    // flash_ctl_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [63:0] flash_ctl_rsp_width_adapter_src_data;                                     // flash_ctl_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         flash_ctl_rsp_width_adapter_src_ready;                                    // rsp_demux:sink_ready -> flash_ctl_rsp_width_adapter:out_ready
	wire   [1:0] flash_ctl_rsp_width_adapter_src_channel;                                  // flash_ctl_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         flash_ctl_rsp_width_adapter_src_startofpacket;                            // flash_ctl_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         flash_ctl_rsp_width_adapter_src_endofpacket;                              // flash_ctl_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_002_src_valid;                                                     // router_002:src_valid -> flash_ide_rsp_width_adapter:in_valid
	wire  [81:0] router_002_src_data;                                                      // router_002:src_data -> flash_ide_rsp_width_adapter:in_data
	wire         router_002_src_ready;                                                     // flash_ide_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                                   // router_002:src_channel -> flash_ide_rsp_width_adapter:in_channel
	wire         router_002_src_startofpacket;                                             // router_002:src_startofpacket -> flash_ide_rsp_width_adapter:in_startofpacket
	wire         router_002_src_endofpacket;                                               // router_002:src_endofpacket -> flash_ide_rsp_width_adapter:in_endofpacket
	wire         flash_ide_rsp_width_adapter_src_valid;                                    // flash_ide_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [63:0] flash_ide_rsp_width_adapter_src_data;                                     // flash_ide_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire         flash_ide_rsp_width_adapter_src_ready;                                    // rsp_demux_001:sink_ready -> flash_ide_rsp_width_adapter:out_ready
	wire   [1:0] flash_ide_rsp_width_adapter_src_channel;                                  // flash_ide_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire         flash_ide_rsp_width_adapter_src_startofpacket;                            // flash_ide_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         flash_ide_rsp_width_adapter_src_endofpacket;                              // flash_ide_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         flash_ctl_agent_rdata_fifo_src_valid;                                     // flash_ctl_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] flash_ctl_agent_rdata_fifo_src_data;                                      // flash_ctl_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         flash_ctl_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter:in_0_ready -> flash_ctl_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                            // avalon_st_adapter:out_0_valid -> flash_ctl_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                             // avalon_st_adapter:out_0_data -> flash_ctl_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                            // flash_ctl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                            // avalon_st_adapter:out_0_error -> flash_ctl_agent:rdata_fifo_sink_error
	wire         flash_ide_agent_rdata_fifo_src_valid;                                     // flash_ide_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] flash_ide_agent_rdata_fifo_src_data;                                      // flash_ide_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         flash_ide_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_001:in_0_ready -> flash_ide_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                        // avalon_st_adapter_001:out_0_valid -> flash_ide_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                         // avalon_st_adapter_001:out_0_data -> flash_ide_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                        // flash_ide_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                        // avalon_st_adapter_001:out_0_error -> flash_ide_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (12),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (12),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ext_bus_avalon_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (ext_bus_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (ext_bus_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ext_bus_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ext_bus_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ext_bus_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ext_bus_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ext_bus_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ext_bus_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ext_bus_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ext_bus_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ext_bus_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ext_bus_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ext_bus_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ext_bus_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (ext_bus_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (ext_bus_avalon_master_read),                                               //                          .read
		.av_readdata            (ext_bus_avalon_master_readdata),                                           //                          .readdata
		.av_write               (ext_bus_avalon_master_write),                                              //                          .write
		.av_writedata           (ext_bus_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_readdatavalid       (),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (4),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (1),
		.AV_DATA_HOLD_CYCLES            (1)
	) flash_ctl_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (ext_bus_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flash_ctl_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (flash_ctl_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (flash_ctl_agent_m0_read),                   //                         .read
		.uav_write              (flash_ctl_agent_m0_write),                  //                         .write
		.uav_waitrequest        (flash_ctl_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (flash_ctl_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (flash_ctl_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (flash_ctl_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (flash_ctl_agent_m0_writedata),              //                         .writedata
		.uav_lock               (flash_ctl_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (flash_ctl_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (flash_ctl_address),                         //      avalon_anti_slave_0.address
		.av_write               (flash_ctl_write),                           //                         .write
		.av_read                (flash_ctl_read),                            //                         .read
		.av_readdata            (flash_ctl_readdata),                        //                         .readdata
		.av_writedata           (flash_ctl_writedata),                       //                         .writedata
		.av_chipselect          (flash_ctl_chipselect),                      //                         .chipselect
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (27),
		.AV_WRITE_WAIT_CYCLES           (25),
		.AV_SETUP_WAIT_CYCLES           (4),
		.AV_DATA_HOLD_CYCLES            (2)
	) flash_ide_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (ext_bus_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flash_ide_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (flash_ide_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (flash_ide_agent_m0_read),                   //                         .read
		.uav_write              (flash_ide_agent_m0_write),                  //                         .write
		.uav_waitrequest        (flash_ide_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (flash_ide_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (flash_ide_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (flash_ide_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (flash_ide_agent_m0_writedata),              //                         .writedata
		.uav_lock               (flash_ide_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (flash_ide_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (flash_ide_address),                         //      avalon_anti_slave_0.address
		.av_write               (flash_ide_write),                           //                         .write
		.av_read                (flash_ide_read),                            //                         .read
		.av_readdata            (flash_ide_readdata),                        //                         .readdata
		.av_writedata           (flash_ide_writedata),                       //                         .writedata
		.av_chipselect          (flash_ide_chipselect),                      //                         .chipselect
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (63),
		.PKT_ORI_BURST_SIZE_L      (61),
		.PKT_RESPONSE_STATUS_H     (60),
		.PKT_RESPONSE_STATUS_L     (59),
		.PKT_QOS_H                 (48),
		.PKT_QOS_L                 (48),
		.PKT_DATA_SIDEBAND_H       (46),
		.PKT_DATA_SIDEBAND_L       (46),
		.PKT_ADDR_SIDEBAND_H       (45),
		.PKT_ADDR_SIDEBAND_L       (45),
		.PKT_BURST_TYPE_H          (44),
		.PKT_BURST_TYPE_L          (43),
		.PKT_CACHE_H               (58),
		.PKT_CACHE_L               (55),
		.PKT_THREAD_ID_H           (51),
		.PKT_THREAD_ID_L           (51),
		.PKT_BURST_SIZE_H          (42),
		.PKT_BURST_SIZE_L          (40),
		.PKT_TRANS_EXCLUSIVE       (35),
		.PKT_TRANS_LOCK            (34),
		.PKT_BEGIN_BURST           (47),
		.PKT_PROTECTION_H          (54),
		.PKT_PROTECTION_L          (52),
		.PKT_BURSTWRAP_H           (39),
		.PKT_BURSTWRAP_L           (39),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (36),
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_POSTED          (31),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (49),
		.PKT_SRC_ID_L              (49),
		.PKT_DEST_ID_H             (50),
		.PKT_DEST_ID_L             (50),
		.ST_DATA_W                 (64),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ext_bus_avalon_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (ext_bus_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (ext_bus_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ext_bus_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ext_bus_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ext_bus_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ext_bus_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ext_bus_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ext_bus_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ext_bus_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ext_bus_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ext_bus_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ext_bus_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ext_bus_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ext_bus_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ext_bus_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ext_bus_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ext_bus_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                        //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flash_ctl_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (ext_bus_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (flash_ctl_agent_m0_address),                    //              m0.address
		.m0_burstcount           (flash_ctl_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (flash_ctl_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (flash_ctl_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (flash_ctl_agent_m0_lock),                       //                .lock
		.m0_readdata             (flash_ctl_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (flash_ctl_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (flash_ctl_agent_m0_read),                       //                .read
		.m0_waitrequest          (flash_ctl_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (flash_ctl_agent_m0_writedata),                  //                .writedata
		.m0_write                (flash_ctl_agent_m0_write),                      //                .write
		.rp_endofpacket          (flash_ctl_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (flash_ctl_agent_rp_ready),                      //                .ready
		.rp_valid                (flash_ctl_agent_rp_valid),                      //                .valid
		.rp_data                 (flash_ctl_agent_rp_data),                       //                .data
		.rp_startofpacket        (flash_ctl_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (flash_ctl_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (flash_ctl_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (flash_ctl_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (flash_ctl_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (flash_ctl_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (flash_ctl_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (flash_ctl_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (flash_ctl_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (flash_ctl_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (flash_ctl_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (flash_ctl_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (flash_ctl_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (flash_ctl_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (flash_ctl_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (flash_ctl_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (flash_ctl_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (flash_ctl_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_ctl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (flash_ctl_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flash_ctl_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (ext_bus_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (flash_ctl_agent_rf_source_data),             //        in.data
		.in_valid          (flash_ctl_agent_rf_source_valid),            //          .valid
		.in_ready          (flash_ctl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (flash_ctl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (flash_ctl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (flash_ctl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (flash_ctl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (flash_ctl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (flash_ctl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (flash_ctl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flash_ide_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (ext_bus_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (flash_ide_agent_m0_address),                    //              m0.address
		.m0_burstcount           (flash_ide_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (flash_ide_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (flash_ide_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (flash_ide_agent_m0_lock),                       //                .lock
		.m0_readdata             (flash_ide_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (flash_ide_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (flash_ide_agent_m0_read),                       //                .read
		.m0_waitrequest          (flash_ide_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (flash_ide_agent_m0_writedata),                  //                .writedata
		.m0_write                (flash_ide_agent_m0_write),                      //                .write
		.rp_endofpacket          (flash_ide_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (flash_ide_agent_rp_ready),                      //                .ready
		.rp_valid                (flash_ide_agent_rp_valid),                      //                .valid
		.rp_data                 (flash_ide_agent_rp_data),                       //                .data
		.rp_startofpacket        (flash_ide_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (flash_ide_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (flash_ide_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (flash_ide_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (flash_ide_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (flash_ide_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (flash_ide_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (flash_ide_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (flash_ide_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (flash_ide_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (flash_ide_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (flash_ide_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (flash_ide_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (flash_ide_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (flash_ide_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (flash_ide_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (flash_ide_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),             //                .error
		.rdata_fifo_src_ready    (flash_ide_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_ide_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (flash_ide_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flash_ide_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (ext_bus_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (flash_ide_agent_rf_source_data),             //        in.data
		.in_valid          (flash_ide_agent_rf_source_valid),            //          .valid
		.in_ready          (flash_ide_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (flash_ide_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (flash_ide_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (flash_ide_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (flash_ide_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (flash_ide_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (flash_ide_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (flash_ide_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	unsaved_mm_interconnect_0_router router (
		.sink_ready         (ext_bus_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ext_bus_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (ext_bus_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (ext_bus_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ext_bus_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (ext_bus_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	unsaved_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (flash_ctl_agent_rp_ready),                  //      sink.ready
		.sink_valid         (flash_ctl_agent_rp_valid),                  //          .valid
		.sink_data          (flash_ctl_agent_rp_data),                   //          .data
		.sink_startofpacket (flash_ctl_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (flash_ctl_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (ext_bus_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                      //       src.ready
		.src_valid          (router_001_src_valid),                      //          .valid
		.src_data           (router_001_src_data),                       //          .data
		.src_channel        (router_001_src_channel),                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                 //          .endofpacket
	);

	unsaved_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (flash_ide_agent_rp_ready),                  //      sink.ready
		.sink_valid         (flash_ide_agent_rp_valid),                  //          .valid
		.sink_data          (flash_ide_agent_rp_data),                   //          .data
		.sink_startofpacket (flash_ide_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (flash_ide_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (ext_bus_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                      //       src.ready
		.src_valid          (router_002_src_valid),                      //          .valid
		.src_data           (router_002_src_data),                       //          .data
		.src_channel        (router_002_src_channel),                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                 //          .endofpacket
	);

	unsaved_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (ext_bus_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                          //      sink.ready
		.sink_channel       (router_src_channel),                        //          .channel
		.sink_data          (router_src_data),                           //          .data
		.sink_startofpacket (router_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_src0_data),                       //          .data
		.src0_channel       (cmd_demux_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                      //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                      //          .valid
		.src1_data          (cmd_demux_src1_data),                       //          .data
		.src1_channel       (cmd_demux_src1_channel),                    //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                 //          .endofpacket
	);

	unsaved_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (ext_bus_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                         //          .valid
		.src_data            (cmd_mux_src_data),                          //          .data
		.src_channel         (cmd_mux_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                 //          .endofpacket
	);

	unsaved_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (ext_bus_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                     //          .valid
		.src_data            (cmd_mux_001_src_data),                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                    //          .channel
		.sink0_data          (cmd_demux_src1_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                 //          .endofpacket
	);

	unsaved_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (ext_bus_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (flash_ctl_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (flash_ctl_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (flash_ctl_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (flash_ctl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (flash_ctl_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (flash_ctl_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	unsaved_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (ext_bus_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (flash_ide_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (flash_ide_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (flash_ide_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (flash_ide_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (flash_ide_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (flash_ide_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	unsaved_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (ext_bus_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                         //          .valid
		.src_data            (rsp_mux_src_data),                          //          .data
		.src_channel         (rsp_mux_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                  //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                   //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)             //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (29),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (38),
		.IN_PKT_BYTE_CNT_L             (36),
		.IN_PKT_TRANS_COMPRESSED_READ  (30),
		.IN_PKT_TRANS_WRITE            (32),
		.IN_PKT_BURSTWRAP_H            (39),
		.IN_PKT_BURSTWRAP_L            (39),
		.IN_PKT_BURST_SIZE_H           (42),
		.IN_PKT_BURST_SIZE_L           (40),
		.IN_PKT_RESPONSE_STATUS_H      (60),
		.IN_PKT_RESPONSE_STATUS_L      (59),
		.IN_PKT_TRANS_EXCLUSIVE        (35),
		.IN_PKT_BURST_TYPE_H           (44),
		.IN_PKT_BURST_TYPE_L           (43),
		.IN_PKT_ORI_BURST_SIZE_L       (61),
		.IN_PKT_ORI_BURST_SIZE_H       (63),
		.IN_ST_DATA_W                  (64),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (56),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (60),
		.OUT_PKT_BURST_SIZE_L          (58),
		.OUT_PKT_RESPONSE_STATUS_H     (78),
		.OUT_PKT_RESPONSE_STATUS_L     (77),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (62),
		.OUT_PKT_BURST_TYPE_L          (61),
		.OUT_PKT_ORI_BURST_SIZE_L      (79),
		.OUT_PKT_ORI_BURST_SIZE_H      (81),
		.OUT_ST_DATA_W                 (82),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) flash_ctl_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                 //       clk.clk
		.reset                (ext_bus_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                             //          .ready
		.in_data              (cmd_mux_src_data),                              //          .data
		.out_endofpacket      (flash_ctl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (flash_ctl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (flash_ctl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (flash_ctl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (flash_ctl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (flash_ctl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (29),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (38),
		.IN_PKT_BYTE_CNT_L             (36),
		.IN_PKT_TRANS_COMPRESSED_READ  (30),
		.IN_PKT_TRANS_WRITE            (32),
		.IN_PKT_BURSTWRAP_H            (39),
		.IN_PKT_BURSTWRAP_L            (39),
		.IN_PKT_BURST_SIZE_H           (42),
		.IN_PKT_BURST_SIZE_L           (40),
		.IN_PKT_RESPONSE_STATUS_H      (60),
		.IN_PKT_RESPONSE_STATUS_L      (59),
		.IN_PKT_TRANS_EXCLUSIVE        (35),
		.IN_PKT_BURST_TYPE_H           (44),
		.IN_PKT_BURST_TYPE_L           (43),
		.IN_PKT_ORI_BURST_SIZE_L       (61),
		.IN_PKT_ORI_BURST_SIZE_H       (63),
		.IN_ST_DATA_W                  (64),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (56),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (60),
		.OUT_PKT_BURST_SIZE_L          (58),
		.OUT_PKT_RESPONSE_STATUS_H     (78),
		.OUT_PKT_RESPONSE_STATUS_L     (77),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (62),
		.OUT_PKT_BURST_TYPE_L          (61),
		.OUT_PKT_ORI_BURST_SIZE_L      (79),
		.OUT_PKT_ORI_BURST_SIZE_H      (81),
		.OUT_ST_DATA_W                 (82),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) flash_ide_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                 //       clk.clk
		.reset                (ext_bus_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                         //          .ready
		.in_data              (cmd_mux_001_src_data),                          //          .data
		.out_endofpacket      (flash_ide_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (flash_ide_cmd_width_adapter_src_data),          //          .data
		.out_channel          (flash_ide_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (flash_ide_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (flash_ide_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (flash_ide_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (56),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (57),
		.IN_PKT_BURSTWRAP_L            (57),
		.IN_PKT_BURST_SIZE_H           (60),
		.IN_PKT_BURST_SIZE_L           (58),
		.IN_PKT_RESPONSE_STATUS_H      (78),
		.IN_PKT_RESPONSE_STATUS_L      (77),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (62),
		.IN_PKT_BURST_TYPE_L           (61),
		.IN_PKT_ORI_BURST_SIZE_L       (79),
		.IN_PKT_ORI_BURST_SIZE_H       (81),
		.IN_ST_DATA_W                  (82),
		.OUT_PKT_ADDR_H                (29),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (38),
		.OUT_PKT_BYTE_CNT_L            (36),
		.OUT_PKT_TRANS_COMPRESSED_READ (30),
		.OUT_PKT_BURST_SIZE_H          (42),
		.OUT_PKT_BURST_SIZE_L          (40),
		.OUT_PKT_RESPONSE_STATUS_H     (60),
		.OUT_PKT_RESPONSE_STATUS_L     (59),
		.OUT_PKT_TRANS_EXCLUSIVE       (35),
		.OUT_PKT_BURST_TYPE_H          (44),
		.OUT_PKT_BURST_TYPE_L          (43),
		.OUT_PKT_ORI_BURST_SIZE_L      (61),
		.OUT_PKT_ORI_BURST_SIZE_H      (63),
		.OUT_ST_DATA_W                 (64),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) flash_ctl_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                 //       clk.clk
		.reset                (ext_bus_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_001_src_valid),                          //      sink.valid
		.in_channel           (router_001_src_channel),                        //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_001_src_ready),                          //          .ready
		.in_data              (router_001_src_data),                           //          .data
		.out_endofpacket      (flash_ctl_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (flash_ctl_rsp_width_adapter_src_data),          //          .data
		.out_channel          (flash_ctl_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (flash_ctl_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (flash_ctl_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (flash_ctl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (56),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (57),
		.IN_PKT_BURSTWRAP_L            (57),
		.IN_PKT_BURST_SIZE_H           (60),
		.IN_PKT_BURST_SIZE_L           (58),
		.IN_PKT_RESPONSE_STATUS_H      (78),
		.IN_PKT_RESPONSE_STATUS_L      (77),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (62),
		.IN_PKT_BURST_TYPE_L           (61),
		.IN_PKT_ORI_BURST_SIZE_L       (79),
		.IN_PKT_ORI_BURST_SIZE_H       (81),
		.IN_ST_DATA_W                  (82),
		.OUT_PKT_ADDR_H                (29),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (38),
		.OUT_PKT_BYTE_CNT_L            (36),
		.OUT_PKT_TRANS_COMPRESSED_READ (30),
		.OUT_PKT_BURST_SIZE_H          (42),
		.OUT_PKT_BURST_SIZE_L          (40),
		.OUT_PKT_RESPONSE_STATUS_H     (60),
		.OUT_PKT_RESPONSE_STATUS_L     (59),
		.OUT_PKT_TRANS_EXCLUSIVE       (35),
		.OUT_PKT_BURST_TYPE_H          (44),
		.OUT_PKT_BURST_TYPE_L          (43),
		.OUT_PKT_ORI_BURST_SIZE_L      (61),
		.OUT_PKT_ORI_BURST_SIZE_H      (63),
		.OUT_ST_DATA_W                 (64),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) flash_ide_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                 //       clk.clk
		.reset                (ext_bus_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_002_src_valid),                          //      sink.valid
		.in_channel           (router_002_src_channel),                        //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_002_src_ready),                          //          .ready
		.in_data              (router_002_src_data),                           //          .data
		.out_endofpacket      (flash_ide_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (flash_ide_rsp_width_adapter_src_data),          //          .data
		.out_channel          (flash_ide_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (flash_ide_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (flash_ide_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (flash_ide_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	unsaved_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (ext_bus_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flash_ctl_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (flash_ctl_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (flash_ctl_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)              //         .error
	);

	unsaved_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (ext_bus_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flash_ide_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (flash_ide_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (flash_ide_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)          //         .error
	);

endmodule
