// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2017 02:46:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    memory_mapped
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memory_mapped_vlg_sample_tst(
	ADDRESS,
	clock,
	INPUT1,
	INPUT2,
	MEMORY_mapped_IO_INPUT,
	reset,
	WDATA,
	sampler_tx
);
input [31:0] ADDRESS;
input  clock;
input [31:0] INPUT1;
input [31:0] INPUT2;
input  MEMORY_mapped_IO_INPUT;
input  reset;
input [31:0] WDATA;
output sampler_tx;

reg sample;
time current_time;
always @(ADDRESS or clock or INPUT1 or INPUT2 or MEMORY_mapped_IO_INPUT or reset or WDATA)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module memory_mapped_vlg_check_tst (
	OUTSig1,
	OUTSig2,
	READMEM,
	sampler_rx
);
input [31:0] OUTSig1;
input [31:0] OUTSig2;
input [31:0] READMEM;
input sampler_rx;

reg [31:0] OUTSig1_expected;
reg [31:0] OUTSig2_expected;
reg [31:0] READMEM_expected;

reg [31:0] OUTSig1_prev;
reg [31:0] OUTSig2_prev;
reg [31:0] READMEM_prev;

reg [31:0] OUTSig1_expected_prev;
reg [31:0] OUTSig2_expected_prev;
reg [31:0] READMEM_expected_prev;

reg [31:0] last_OUTSig1_exp;
reg [31:0] last_OUTSig2_exp;
reg [31:0] last_READMEM_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUTSig1_prev = OUTSig1;
	OUTSig2_prev = OUTSig2;
	READMEM_prev = READMEM;
end

// update expected /o prevs

always @(trigger)
begin
	OUTSig1_expected_prev = OUTSig1_expected;
	OUTSig2_expected_prev = OUTSig2_expected;
	READMEM_expected_prev = READMEM_expected;
end


// expected OUTSig1[ 31 ]
initial
begin
	OUTSig1_expected[31] = 1'bX;
end 
// expected OUTSig1[ 30 ]
initial
begin
	OUTSig1_expected[30] = 1'bX;
end 
// expected OUTSig1[ 29 ]
initial
begin
	OUTSig1_expected[29] = 1'bX;
end 
// expected OUTSig1[ 28 ]
initial
begin
	OUTSig1_expected[28] = 1'bX;
end 
// expected OUTSig1[ 27 ]
initial
begin
	OUTSig1_expected[27] = 1'bX;
end 
// expected OUTSig1[ 26 ]
initial
begin
	OUTSig1_expected[26] = 1'bX;
end 
// expected OUTSig1[ 25 ]
initial
begin
	OUTSig1_expected[25] = 1'bX;
end 
// expected OUTSig1[ 24 ]
initial
begin
	OUTSig1_expected[24] = 1'bX;
end 
// expected OUTSig1[ 23 ]
initial
begin
	OUTSig1_expected[23] = 1'bX;
end 
// expected OUTSig1[ 22 ]
initial
begin
	OUTSig1_expected[22] = 1'bX;
end 
// expected OUTSig1[ 21 ]
initial
begin
	OUTSig1_expected[21] = 1'bX;
end 
// expected OUTSig1[ 20 ]
initial
begin
	OUTSig1_expected[20] = 1'bX;
end 
// expected OUTSig1[ 19 ]
initial
begin
	OUTSig1_expected[19] = 1'bX;
end 
// expected OUTSig1[ 18 ]
initial
begin
	OUTSig1_expected[18] = 1'bX;
end 
// expected OUTSig1[ 17 ]
initial
begin
	OUTSig1_expected[17] = 1'bX;
end 
// expected OUTSig1[ 16 ]
initial
begin
	OUTSig1_expected[16] = 1'bX;
end 
// expected OUTSig1[ 15 ]
initial
begin
	OUTSig1_expected[15] = 1'bX;
end 
// expected OUTSig1[ 14 ]
initial
begin
	OUTSig1_expected[14] = 1'bX;
end 
// expected OUTSig1[ 13 ]
initial
begin
	OUTSig1_expected[13] = 1'bX;
end 
// expected OUTSig1[ 12 ]
initial
begin
	OUTSig1_expected[12] = 1'bX;
end 
// expected OUTSig1[ 11 ]
initial
begin
	OUTSig1_expected[11] = 1'bX;
end 
// expected OUTSig1[ 10 ]
initial
begin
	OUTSig1_expected[10] = 1'bX;
end 
// expected OUTSig1[ 9 ]
initial
begin
	OUTSig1_expected[9] = 1'bX;
end 
// expected OUTSig1[ 8 ]
initial
begin
	OUTSig1_expected[8] = 1'bX;
end 
// expected OUTSig1[ 7 ]
initial
begin
	OUTSig1_expected[7] = 1'bX;
end 
// expected OUTSig1[ 6 ]
initial
begin
	OUTSig1_expected[6] = 1'bX;
end 
// expected OUTSig1[ 5 ]
initial
begin
	OUTSig1_expected[5] = 1'bX;
end 
// expected OUTSig1[ 4 ]
initial
begin
	OUTSig1_expected[4] = 1'bX;
end 
// expected OUTSig1[ 3 ]
initial
begin
	OUTSig1_expected[3] = 1'bX;
end 
// expected OUTSig1[ 2 ]
initial
begin
	OUTSig1_expected[2] = 1'bX;
end 
// expected OUTSig1[ 1 ]
initial
begin
	OUTSig1_expected[1] = 1'bX;
end 
// expected OUTSig1[ 0 ]
initial
begin
	OUTSig1_expected[0] = 1'bX;
end 
// expected OUTSig2[ 31 ]
initial
begin
	OUTSig2_expected[31] = 1'bX;
end 
// expected OUTSig2[ 30 ]
initial
begin
	OUTSig2_expected[30] = 1'bX;
end 
// expected OUTSig2[ 29 ]
initial
begin
	OUTSig2_expected[29] = 1'bX;
end 
// expected OUTSig2[ 28 ]
initial
begin
	OUTSig2_expected[28] = 1'bX;
end 
// expected OUTSig2[ 27 ]
initial
begin
	OUTSig2_expected[27] = 1'bX;
end 
// expected OUTSig2[ 26 ]
initial
begin
	OUTSig2_expected[26] = 1'bX;
end 
// expected OUTSig2[ 25 ]
initial
begin
	OUTSig2_expected[25] = 1'bX;
end 
// expected OUTSig2[ 24 ]
initial
begin
	OUTSig2_expected[24] = 1'bX;
end 
// expected OUTSig2[ 23 ]
initial
begin
	OUTSig2_expected[23] = 1'bX;
end 
// expected OUTSig2[ 22 ]
initial
begin
	OUTSig2_expected[22] = 1'bX;
end 
// expected OUTSig2[ 21 ]
initial
begin
	OUTSig2_expected[21] = 1'bX;
end 
// expected OUTSig2[ 20 ]
initial
begin
	OUTSig2_expected[20] = 1'bX;
end 
// expected OUTSig2[ 19 ]
initial
begin
	OUTSig2_expected[19] = 1'bX;
end 
// expected OUTSig2[ 18 ]
initial
begin
	OUTSig2_expected[18] = 1'bX;
end 
// expected OUTSig2[ 17 ]
initial
begin
	OUTSig2_expected[17] = 1'bX;
end 
// expected OUTSig2[ 16 ]
initial
begin
	OUTSig2_expected[16] = 1'bX;
end 
// expected OUTSig2[ 15 ]
initial
begin
	OUTSig2_expected[15] = 1'bX;
end 
// expected OUTSig2[ 14 ]
initial
begin
	OUTSig2_expected[14] = 1'bX;
end 
// expected OUTSig2[ 13 ]
initial
begin
	OUTSig2_expected[13] = 1'bX;
end 
// expected OUTSig2[ 12 ]
initial
begin
	OUTSig2_expected[12] = 1'bX;
end 
// expected OUTSig2[ 11 ]
initial
begin
	OUTSig2_expected[11] = 1'bX;
end 
// expected OUTSig2[ 10 ]
initial
begin
	OUTSig2_expected[10] = 1'bX;
end 
// expected OUTSig2[ 9 ]
initial
begin
	OUTSig2_expected[9] = 1'bX;
end 
// expected OUTSig2[ 8 ]
initial
begin
	OUTSig2_expected[8] = 1'bX;
end 
// expected OUTSig2[ 7 ]
initial
begin
	OUTSig2_expected[7] = 1'bX;
end 
// expected OUTSig2[ 6 ]
initial
begin
	OUTSig2_expected[6] = 1'bX;
end 
// expected OUTSig2[ 5 ]
initial
begin
	OUTSig2_expected[5] = 1'bX;
end 
// expected OUTSig2[ 4 ]
initial
begin
	OUTSig2_expected[4] = 1'bX;
end 
// expected OUTSig2[ 3 ]
initial
begin
	OUTSig2_expected[3] = 1'bX;
end 
// expected OUTSig2[ 2 ]
initial
begin
	OUTSig2_expected[2] = 1'bX;
end 
// expected OUTSig2[ 1 ]
initial
begin
	OUTSig2_expected[1] = 1'bX;
end 
// expected OUTSig2[ 0 ]
initial
begin
	OUTSig2_expected[0] = 1'bX;
end 
// expected READMEM[ 31 ]
initial
begin
	READMEM_expected[31] = 1'bX;
end 
// expected READMEM[ 30 ]
initial
begin
	READMEM_expected[30] = 1'bX;
end 
// expected READMEM[ 29 ]
initial
begin
	READMEM_expected[29] = 1'bX;
end 
// expected READMEM[ 28 ]
initial
begin
	READMEM_expected[28] = 1'bX;
end 
// expected READMEM[ 27 ]
initial
begin
	READMEM_expected[27] = 1'bX;
end 
// expected READMEM[ 26 ]
initial
begin
	READMEM_expected[26] = 1'bX;
end 
// expected READMEM[ 25 ]
initial
begin
	READMEM_expected[25] = 1'bX;
end 
// expected READMEM[ 24 ]
initial
begin
	READMEM_expected[24] = 1'bX;
end 
// expected READMEM[ 23 ]
initial
begin
	READMEM_expected[23] = 1'bX;
end 
// expected READMEM[ 22 ]
initial
begin
	READMEM_expected[22] = 1'bX;
end 
// expected READMEM[ 21 ]
initial
begin
	READMEM_expected[21] = 1'bX;
end 
// expected READMEM[ 20 ]
initial
begin
	READMEM_expected[20] = 1'bX;
end 
// expected READMEM[ 19 ]
initial
begin
	READMEM_expected[19] = 1'bX;
end 
// expected READMEM[ 18 ]
initial
begin
	READMEM_expected[18] = 1'bX;
end 
// expected READMEM[ 17 ]
initial
begin
	READMEM_expected[17] = 1'bX;
end 
// expected READMEM[ 16 ]
initial
begin
	READMEM_expected[16] = 1'bX;
end 
// expected READMEM[ 15 ]
initial
begin
	READMEM_expected[15] = 1'bX;
end 
// expected READMEM[ 14 ]
initial
begin
	READMEM_expected[14] = 1'bX;
end 
// expected READMEM[ 13 ]
initial
begin
	READMEM_expected[13] = 1'bX;
end 
// expected READMEM[ 12 ]
initial
begin
	READMEM_expected[12] = 1'bX;
end 
// expected READMEM[ 11 ]
initial
begin
	READMEM_expected[11] = 1'bX;
end 
// expected READMEM[ 10 ]
initial
begin
	READMEM_expected[10] = 1'bX;
end 
// expected READMEM[ 9 ]
initial
begin
	READMEM_expected[9] = 1'bX;
end 
// expected READMEM[ 8 ]
initial
begin
	READMEM_expected[8] = 1'bX;
end 
// expected READMEM[ 7 ]
initial
begin
	READMEM_expected[7] = 1'bX;
end 
// expected READMEM[ 6 ]
initial
begin
	READMEM_expected[6] = 1'bX;
end 
// expected READMEM[ 5 ]
initial
begin
	READMEM_expected[5] = 1'bX;
end 
// expected READMEM[ 4 ]
initial
begin
	READMEM_expected[4] = 1'bX;
end 
// expected READMEM[ 3 ]
initial
begin
	READMEM_expected[3] = 1'bX;
end 
// expected READMEM[ 2 ]
initial
begin
	READMEM_expected[2] = 1'bX;
end 
// expected READMEM[ 1 ]
initial
begin
	READMEM_expected[1] = 1'bX;
end 
// expected READMEM[ 0 ]
initial
begin
	READMEM_expected[0] = 1'bX;
end 
// generate trigger
always @(OUTSig1_expected or OUTSig1 or OUTSig2_expected or OUTSig2 or READMEM_expected or READMEM)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUTSig1 = %b | expected OUTSig2 = %b | expected READMEM = %b | ",OUTSig1_expected_prev,OUTSig2_expected_prev,READMEM_expected_prev);
	$display("| real OUTSig1 = %b | real OUTSig2 = %b | real READMEM = %b | ",OUTSig1_prev,OUTSig2_prev,READMEM_prev);
`endif
	if (
		( OUTSig1_expected_prev[0] !== 1'bx ) && ( OUTSig1_prev[0] !== OUTSig1_expected_prev[0] )
		&& ((OUTSig1_expected_prev[0] !== last_OUTSig1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[0] = OUTSig1_expected_prev[0];
	end
	if (
		( OUTSig1_expected_prev[1] !== 1'bx ) && ( OUTSig1_prev[1] !== OUTSig1_expected_prev[1] )
		&& ((OUTSig1_expected_prev[1] !== last_OUTSig1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[1] = OUTSig1_expected_prev[1];
	end
	if (
		( OUTSig1_expected_prev[2] !== 1'bx ) && ( OUTSig1_prev[2] !== OUTSig1_expected_prev[2] )
		&& ((OUTSig1_expected_prev[2] !== last_OUTSig1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[2] = OUTSig1_expected_prev[2];
	end
	if (
		( OUTSig1_expected_prev[3] !== 1'bx ) && ( OUTSig1_prev[3] !== OUTSig1_expected_prev[3] )
		&& ((OUTSig1_expected_prev[3] !== last_OUTSig1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[3] = OUTSig1_expected_prev[3];
	end
	if (
		( OUTSig1_expected_prev[4] !== 1'bx ) && ( OUTSig1_prev[4] !== OUTSig1_expected_prev[4] )
		&& ((OUTSig1_expected_prev[4] !== last_OUTSig1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[4] = OUTSig1_expected_prev[4];
	end
	if (
		( OUTSig1_expected_prev[5] !== 1'bx ) && ( OUTSig1_prev[5] !== OUTSig1_expected_prev[5] )
		&& ((OUTSig1_expected_prev[5] !== last_OUTSig1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[5] = OUTSig1_expected_prev[5];
	end
	if (
		( OUTSig1_expected_prev[6] !== 1'bx ) && ( OUTSig1_prev[6] !== OUTSig1_expected_prev[6] )
		&& ((OUTSig1_expected_prev[6] !== last_OUTSig1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[6] = OUTSig1_expected_prev[6];
	end
	if (
		( OUTSig1_expected_prev[7] !== 1'bx ) && ( OUTSig1_prev[7] !== OUTSig1_expected_prev[7] )
		&& ((OUTSig1_expected_prev[7] !== last_OUTSig1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[7] = OUTSig1_expected_prev[7];
	end
	if (
		( OUTSig1_expected_prev[8] !== 1'bx ) && ( OUTSig1_prev[8] !== OUTSig1_expected_prev[8] )
		&& ((OUTSig1_expected_prev[8] !== last_OUTSig1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[8] = OUTSig1_expected_prev[8];
	end
	if (
		( OUTSig1_expected_prev[9] !== 1'bx ) && ( OUTSig1_prev[9] !== OUTSig1_expected_prev[9] )
		&& ((OUTSig1_expected_prev[9] !== last_OUTSig1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[9] = OUTSig1_expected_prev[9];
	end
	if (
		( OUTSig1_expected_prev[10] !== 1'bx ) && ( OUTSig1_prev[10] !== OUTSig1_expected_prev[10] )
		&& ((OUTSig1_expected_prev[10] !== last_OUTSig1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[10] = OUTSig1_expected_prev[10];
	end
	if (
		( OUTSig1_expected_prev[11] !== 1'bx ) && ( OUTSig1_prev[11] !== OUTSig1_expected_prev[11] )
		&& ((OUTSig1_expected_prev[11] !== last_OUTSig1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[11] = OUTSig1_expected_prev[11];
	end
	if (
		( OUTSig1_expected_prev[12] !== 1'bx ) && ( OUTSig1_prev[12] !== OUTSig1_expected_prev[12] )
		&& ((OUTSig1_expected_prev[12] !== last_OUTSig1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[12] = OUTSig1_expected_prev[12];
	end
	if (
		( OUTSig1_expected_prev[13] !== 1'bx ) && ( OUTSig1_prev[13] !== OUTSig1_expected_prev[13] )
		&& ((OUTSig1_expected_prev[13] !== last_OUTSig1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[13] = OUTSig1_expected_prev[13];
	end
	if (
		( OUTSig1_expected_prev[14] !== 1'bx ) && ( OUTSig1_prev[14] !== OUTSig1_expected_prev[14] )
		&& ((OUTSig1_expected_prev[14] !== last_OUTSig1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[14] = OUTSig1_expected_prev[14];
	end
	if (
		( OUTSig1_expected_prev[15] !== 1'bx ) && ( OUTSig1_prev[15] !== OUTSig1_expected_prev[15] )
		&& ((OUTSig1_expected_prev[15] !== last_OUTSig1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[15] = OUTSig1_expected_prev[15];
	end
	if (
		( OUTSig1_expected_prev[16] !== 1'bx ) && ( OUTSig1_prev[16] !== OUTSig1_expected_prev[16] )
		&& ((OUTSig1_expected_prev[16] !== last_OUTSig1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[16] = OUTSig1_expected_prev[16];
	end
	if (
		( OUTSig1_expected_prev[17] !== 1'bx ) && ( OUTSig1_prev[17] !== OUTSig1_expected_prev[17] )
		&& ((OUTSig1_expected_prev[17] !== last_OUTSig1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[17] = OUTSig1_expected_prev[17];
	end
	if (
		( OUTSig1_expected_prev[18] !== 1'bx ) && ( OUTSig1_prev[18] !== OUTSig1_expected_prev[18] )
		&& ((OUTSig1_expected_prev[18] !== last_OUTSig1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[18] = OUTSig1_expected_prev[18];
	end
	if (
		( OUTSig1_expected_prev[19] !== 1'bx ) && ( OUTSig1_prev[19] !== OUTSig1_expected_prev[19] )
		&& ((OUTSig1_expected_prev[19] !== last_OUTSig1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[19] = OUTSig1_expected_prev[19];
	end
	if (
		( OUTSig1_expected_prev[20] !== 1'bx ) && ( OUTSig1_prev[20] !== OUTSig1_expected_prev[20] )
		&& ((OUTSig1_expected_prev[20] !== last_OUTSig1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[20] = OUTSig1_expected_prev[20];
	end
	if (
		( OUTSig1_expected_prev[21] !== 1'bx ) && ( OUTSig1_prev[21] !== OUTSig1_expected_prev[21] )
		&& ((OUTSig1_expected_prev[21] !== last_OUTSig1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[21] = OUTSig1_expected_prev[21];
	end
	if (
		( OUTSig1_expected_prev[22] !== 1'bx ) && ( OUTSig1_prev[22] !== OUTSig1_expected_prev[22] )
		&& ((OUTSig1_expected_prev[22] !== last_OUTSig1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[22] = OUTSig1_expected_prev[22];
	end
	if (
		( OUTSig1_expected_prev[23] !== 1'bx ) && ( OUTSig1_prev[23] !== OUTSig1_expected_prev[23] )
		&& ((OUTSig1_expected_prev[23] !== last_OUTSig1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[23] = OUTSig1_expected_prev[23];
	end
	if (
		( OUTSig1_expected_prev[24] !== 1'bx ) && ( OUTSig1_prev[24] !== OUTSig1_expected_prev[24] )
		&& ((OUTSig1_expected_prev[24] !== last_OUTSig1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[24] = OUTSig1_expected_prev[24];
	end
	if (
		( OUTSig1_expected_prev[25] !== 1'bx ) && ( OUTSig1_prev[25] !== OUTSig1_expected_prev[25] )
		&& ((OUTSig1_expected_prev[25] !== last_OUTSig1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[25] = OUTSig1_expected_prev[25];
	end
	if (
		( OUTSig1_expected_prev[26] !== 1'bx ) && ( OUTSig1_prev[26] !== OUTSig1_expected_prev[26] )
		&& ((OUTSig1_expected_prev[26] !== last_OUTSig1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[26] = OUTSig1_expected_prev[26];
	end
	if (
		( OUTSig1_expected_prev[27] !== 1'bx ) && ( OUTSig1_prev[27] !== OUTSig1_expected_prev[27] )
		&& ((OUTSig1_expected_prev[27] !== last_OUTSig1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[27] = OUTSig1_expected_prev[27];
	end
	if (
		( OUTSig1_expected_prev[28] !== 1'bx ) && ( OUTSig1_prev[28] !== OUTSig1_expected_prev[28] )
		&& ((OUTSig1_expected_prev[28] !== last_OUTSig1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[28] = OUTSig1_expected_prev[28];
	end
	if (
		( OUTSig1_expected_prev[29] !== 1'bx ) && ( OUTSig1_prev[29] !== OUTSig1_expected_prev[29] )
		&& ((OUTSig1_expected_prev[29] !== last_OUTSig1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[29] = OUTSig1_expected_prev[29];
	end
	if (
		( OUTSig1_expected_prev[30] !== 1'bx ) && ( OUTSig1_prev[30] !== OUTSig1_expected_prev[30] )
		&& ((OUTSig1_expected_prev[30] !== last_OUTSig1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[30] = OUTSig1_expected_prev[30];
	end
	if (
		( OUTSig1_expected_prev[31] !== 1'bx ) && ( OUTSig1_prev[31] !== OUTSig1_expected_prev[31] )
		&& ((OUTSig1_expected_prev[31] !== last_OUTSig1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig1_expected_prev);
		$display ("     Real value = %b", OUTSig1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTSig1_exp[31] = OUTSig1_expected_prev[31];
	end
	if (
		( OUTSig2_expected_prev[0] !== 1'bx ) && ( OUTSig2_prev[0] !== OUTSig2_expected_prev[0] )
		&& ((OUTSig2_expected_prev[0] !== last_OUTSig2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[0] = OUTSig2_expected_prev[0];
	end
	if (
		( OUTSig2_expected_prev[1] !== 1'bx ) && ( OUTSig2_prev[1] !== OUTSig2_expected_prev[1] )
		&& ((OUTSig2_expected_prev[1] !== last_OUTSig2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[1] = OUTSig2_expected_prev[1];
	end
	if (
		( OUTSig2_expected_prev[2] !== 1'bx ) && ( OUTSig2_prev[2] !== OUTSig2_expected_prev[2] )
		&& ((OUTSig2_expected_prev[2] !== last_OUTSig2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[2] = OUTSig2_expected_prev[2];
	end
	if (
		( OUTSig2_expected_prev[3] !== 1'bx ) && ( OUTSig2_prev[3] !== OUTSig2_expected_prev[3] )
		&& ((OUTSig2_expected_prev[3] !== last_OUTSig2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[3] = OUTSig2_expected_prev[3];
	end
	if (
		( OUTSig2_expected_prev[4] !== 1'bx ) && ( OUTSig2_prev[4] !== OUTSig2_expected_prev[4] )
		&& ((OUTSig2_expected_prev[4] !== last_OUTSig2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[4] = OUTSig2_expected_prev[4];
	end
	if (
		( OUTSig2_expected_prev[5] !== 1'bx ) && ( OUTSig2_prev[5] !== OUTSig2_expected_prev[5] )
		&& ((OUTSig2_expected_prev[5] !== last_OUTSig2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[5] = OUTSig2_expected_prev[5];
	end
	if (
		( OUTSig2_expected_prev[6] !== 1'bx ) && ( OUTSig2_prev[6] !== OUTSig2_expected_prev[6] )
		&& ((OUTSig2_expected_prev[6] !== last_OUTSig2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[6] = OUTSig2_expected_prev[6];
	end
	if (
		( OUTSig2_expected_prev[7] !== 1'bx ) && ( OUTSig2_prev[7] !== OUTSig2_expected_prev[7] )
		&& ((OUTSig2_expected_prev[7] !== last_OUTSig2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[7] = OUTSig2_expected_prev[7];
	end
	if (
		( OUTSig2_expected_prev[8] !== 1'bx ) && ( OUTSig2_prev[8] !== OUTSig2_expected_prev[8] )
		&& ((OUTSig2_expected_prev[8] !== last_OUTSig2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[8] = OUTSig2_expected_prev[8];
	end
	if (
		( OUTSig2_expected_prev[9] !== 1'bx ) && ( OUTSig2_prev[9] !== OUTSig2_expected_prev[9] )
		&& ((OUTSig2_expected_prev[9] !== last_OUTSig2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[9] = OUTSig2_expected_prev[9];
	end
	if (
		( OUTSig2_expected_prev[10] !== 1'bx ) && ( OUTSig2_prev[10] !== OUTSig2_expected_prev[10] )
		&& ((OUTSig2_expected_prev[10] !== last_OUTSig2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[10] = OUTSig2_expected_prev[10];
	end
	if (
		( OUTSig2_expected_prev[11] !== 1'bx ) && ( OUTSig2_prev[11] !== OUTSig2_expected_prev[11] )
		&& ((OUTSig2_expected_prev[11] !== last_OUTSig2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[11] = OUTSig2_expected_prev[11];
	end
	if (
		( OUTSig2_expected_prev[12] !== 1'bx ) && ( OUTSig2_prev[12] !== OUTSig2_expected_prev[12] )
		&& ((OUTSig2_expected_prev[12] !== last_OUTSig2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[12] = OUTSig2_expected_prev[12];
	end
	if (
		( OUTSig2_expected_prev[13] !== 1'bx ) && ( OUTSig2_prev[13] !== OUTSig2_expected_prev[13] )
		&& ((OUTSig2_expected_prev[13] !== last_OUTSig2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[13] = OUTSig2_expected_prev[13];
	end
	if (
		( OUTSig2_expected_prev[14] !== 1'bx ) && ( OUTSig2_prev[14] !== OUTSig2_expected_prev[14] )
		&& ((OUTSig2_expected_prev[14] !== last_OUTSig2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[14] = OUTSig2_expected_prev[14];
	end
	if (
		( OUTSig2_expected_prev[15] !== 1'bx ) && ( OUTSig2_prev[15] !== OUTSig2_expected_prev[15] )
		&& ((OUTSig2_expected_prev[15] !== last_OUTSig2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[15] = OUTSig2_expected_prev[15];
	end
	if (
		( OUTSig2_expected_prev[16] !== 1'bx ) && ( OUTSig2_prev[16] !== OUTSig2_expected_prev[16] )
		&& ((OUTSig2_expected_prev[16] !== last_OUTSig2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[16] = OUTSig2_expected_prev[16];
	end
	if (
		( OUTSig2_expected_prev[17] !== 1'bx ) && ( OUTSig2_prev[17] !== OUTSig2_expected_prev[17] )
		&& ((OUTSig2_expected_prev[17] !== last_OUTSig2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[17] = OUTSig2_expected_prev[17];
	end
	if (
		( OUTSig2_expected_prev[18] !== 1'bx ) && ( OUTSig2_prev[18] !== OUTSig2_expected_prev[18] )
		&& ((OUTSig2_expected_prev[18] !== last_OUTSig2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[18] = OUTSig2_expected_prev[18];
	end
	if (
		( OUTSig2_expected_prev[19] !== 1'bx ) && ( OUTSig2_prev[19] !== OUTSig2_expected_prev[19] )
		&& ((OUTSig2_expected_prev[19] !== last_OUTSig2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[19] = OUTSig2_expected_prev[19];
	end
	if (
		( OUTSig2_expected_prev[20] !== 1'bx ) && ( OUTSig2_prev[20] !== OUTSig2_expected_prev[20] )
		&& ((OUTSig2_expected_prev[20] !== last_OUTSig2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[20] = OUTSig2_expected_prev[20];
	end
	if (
		( OUTSig2_expected_prev[21] !== 1'bx ) && ( OUTSig2_prev[21] !== OUTSig2_expected_prev[21] )
		&& ((OUTSig2_expected_prev[21] !== last_OUTSig2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[21] = OUTSig2_expected_prev[21];
	end
	if (
		( OUTSig2_expected_prev[22] !== 1'bx ) && ( OUTSig2_prev[22] !== OUTSig2_expected_prev[22] )
		&& ((OUTSig2_expected_prev[22] !== last_OUTSig2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[22] = OUTSig2_expected_prev[22];
	end
	if (
		( OUTSig2_expected_prev[23] !== 1'bx ) && ( OUTSig2_prev[23] !== OUTSig2_expected_prev[23] )
		&& ((OUTSig2_expected_prev[23] !== last_OUTSig2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[23] = OUTSig2_expected_prev[23];
	end
	if (
		( OUTSig2_expected_prev[24] !== 1'bx ) && ( OUTSig2_prev[24] !== OUTSig2_expected_prev[24] )
		&& ((OUTSig2_expected_prev[24] !== last_OUTSig2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[24] = OUTSig2_expected_prev[24];
	end
	if (
		( OUTSig2_expected_prev[25] !== 1'bx ) && ( OUTSig2_prev[25] !== OUTSig2_expected_prev[25] )
		&& ((OUTSig2_expected_prev[25] !== last_OUTSig2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[25] = OUTSig2_expected_prev[25];
	end
	if (
		( OUTSig2_expected_prev[26] !== 1'bx ) && ( OUTSig2_prev[26] !== OUTSig2_expected_prev[26] )
		&& ((OUTSig2_expected_prev[26] !== last_OUTSig2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[26] = OUTSig2_expected_prev[26];
	end
	if (
		( OUTSig2_expected_prev[27] !== 1'bx ) && ( OUTSig2_prev[27] !== OUTSig2_expected_prev[27] )
		&& ((OUTSig2_expected_prev[27] !== last_OUTSig2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[27] = OUTSig2_expected_prev[27];
	end
	if (
		( OUTSig2_expected_prev[28] !== 1'bx ) && ( OUTSig2_prev[28] !== OUTSig2_expected_prev[28] )
		&& ((OUTSig2_expected_prev[28] !== last_OUTSig2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[28] = OUTSig2_expected_prev[28];
	end
	if (
		( OUTSig2_expected_prev[29] !== 1'bx ) && ( OUTSig2_prev[29] !== OUTSig2_expected_prev[29] )
		&& ((OUTSig2_expected_prev[29] !== last_OUTSig2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[29] = OUTSig2_expected_prev[29];
	end
	if (
		( OUTSig2_expected_prev[30] !== 1'bx ) && ( OUTSig2_prev[30] !== OUTSig2_expected_prev[30] )
		&& ((OUTSig2_expected_prev[30] !== last_OUTSig2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[30] = OUTSig2_expected_prev[30];
	end
	if (
		( OUTSig2_expected_prev[31] !== 1'bx ) && ( OUTSig2_prev[31] !== OUTSig2_expected_prev[31] )
		&& ((OUTSig2_expected_prev[31] !== last_OUTSig2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTSig2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTSig2_expected_prev);
		$display ("     Real value = %b", OUTSig2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTSig2_exp[31] = OUTSig2_expected_prev[31];
	end
	if (
		( READMEM_expected_prev[0] !== 1'bx ) && ( READMEM_prev[0] !== READMEM_expected_prev[0] )
		&& ((READMEM_expected_prev[0] !== last_READMEM_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[0] = READMEM_expected_prev[0];
	end
	if (
		( READMEM_expected_prev[1] !== 1'bx ) && ( READMEM_prev[1] !== READMEM_expected_prev[1] )
		&& ((READMEM_expected_prev[1] !== last_READMEM_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[1] = READMEM_expected_prev[1];
	end
	if (
		( READMEM_expected_prev[2] !== 1'bx ) && ( READMEM_prev[2] !== READMEM_expected_prev[2] )
		&& ((READMEM_expected_prev[2] !== last_READMEM_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[2] = READMEM_expected_prev[2];
	end
	if (
		( READMEM_expected_prev[3] !== 1'bx ) && ( READMEM_prev[3] !== READMEM_expected_prev[3] )
		&& ((READMEM_expected_prev[3] !== last_READMEM_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[3] = READMEM_expected_prev[3];
	end
	if (
		( READMEM_expected_prev[4] !== 1'bx ) && ( READMEM_prev[4] !== READMEM_expected_prev[4] )
		&& ((READMEM_expected_prev[4] !== last_READMEM_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[4] = READMEM_expected_prev[4];
	end
	if (
		( READMEM_expected_prev[5] !== 1'bx ) && ( READMEM_prev[5] !== READMEM_expected_prev[5] )
		&& ((READMEM_expected_prev[5] !== last_READMEM_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[5] = READMEM_expected_prev[5];
	end
	if (
		( READMEM_expected_prev[6] !== 1'bx ) && ( READMEM_prev[6] !== READMEM_expected_prev[6] )
		&& ((READMEM_expected_prev[6] !== last_READMEM_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[6] = READMEM_expected_prev[6];
	end
	if (
		( READMEM_expected_prev[7] !== 1'bx ) && ( READMEM_prev[7] !== READMEM_expected_prev[7] )
		&& ((READMEM_expected_prev[7] !== last_READMEM_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[7] = READMEM_expected_prev[7];
	end
	if (
		( READMEM_expected_prev[8] !== 1'bx ) && ( READMEM_prev[8] !== READMEM_expected_prev[8] )
		&& ((READMEM_expected_prev[8] !== last_READMEM_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[8] = READMEM_expected_prev[8];
	end
	if (
		( READMEM_expected_prev[9] !== 1'bx ) && ( READMEM_prev[9] !== READMEM_expected_prev[9] )
		&& ((READMEM_expected_prev[9] !== last_READMEM_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[9] = READMEM_expected_prev[9];
	end
	if (
		( READMEM_expected_prev[10] !== 1'bx ) && ( READMEM_prev[10] !== READMEM_expected_prev[10] )
		&& ((READMEM_expected_prev[10] !== last_READMEM_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[10] = READMEM_expected_prev[10];
	end
	if (
		( READMEM_expected_prev[11] !== 1'bx ) && ( READMEM_prev[11] !== READMEM_expected_prev[11] )
		&& ((READMEM_expected_prev[11] !== last_READMEM_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[11] = READMEM_expected_prev[11];
	end
	if (
		( READMEM_expected_prev[12] !== 1'bx ) && ( READMEM_prev[12] !== READMEM_expected_prev[12] )
		&& ((READMEM_expected_prev[12] !== last_READMEM_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[12] = READMEM_expected_prev[12];
	end
	if (
		( READMEM_expected_prev[13] !== 1'bx ) && ( READMEM_prev[13] !== READMEM_expected_prev[13] )
		&& ((READMEM_expected_prev[13] !== last_READMEM_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[13] = READMEM_expected_prev[13];
	end
	if (
		( READMEM_expected_prev[14] !== 1'bx ) && ( READMEM_prev[14] !== READMEM_expected_prev[14] )
		&& ((READMEM_expected_prev[14] !== last_READMEM_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[14] = READMEM_expected_prev[14];
	end
	if (
		( READMEM_expected_prev[15] !== 1'bx ) && ( READMEM_prev[15] !== READMEM_expected_prev[15] )
		&& ((READMEM_expected_prev[15] !== last_READMEM_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[15] = READMEM_expected_prev[15];
	end
	if (
		( READMEM_expected_prev[16] !== 1'bx ) && ( READMEM_prev[16] !== READMEM_expected_prev[16] )
		&& ((READMEM_expected_prev[16] !== last_READMEM_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[16] = READMEM_expected_prev[16];
	end
	if (
		( READMEM_expected_prev[17] !== 1'bx ) && ( READMEM_prev[17] !== READMEM_expected_prev[17] )
		&& ((READMEM_expected_prev[17] !== last_READMEM_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[17] = READMEM_expected_prev[17];
	end
	if (
		( READMEM_expected_prev[18] !== 1'bx ) && ( READMEM_prev[18] !== READMEM_expected_prev[18] )
		&& ((READMEM_expected_prev[18] !== last_READMEM_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[18] = READMEM_expected_prev[18];
	end
	if (
		( READMEM_expected_prev[19] !== 1'bx ) && ( READMEM_prev[19] !== READMEM_expected_prev[19] )
		&& ((READMEM_expected_prev[19] !== last_READMEM_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[19] = READMEM_expected_prev[19];
	end
	if (
		( READMEM_expected_prev[20] !== 1'bx ) && ( READMEM_prev[20] !== READMEM_expected_prev[20] )
		&& ((READMEM_expected_prev[20] !== last_READMEM_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[20] = READMEM_expected_prev[20];
	end
	if (
		( READMEM_expected_prev[21] !== 1'bx ) && ( READMEM_prev[21] !== READMEM_expected_prev[21] )
		&& ((READMEM_expected_prev[21] !== last_READMEM_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[21] = READMEM_expected_prev[21];
	end
	if (
		( READMEM_expected_prev[22] !== 1'bx ) && ( READMEM_prev[22] !== READMEM_expected_prev[22] )
		&& ((READMEM_expected_prev[22] !== last_READMEM_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[22] = READMEM_expected_prev[22];
	end
	if (
		( READMEM_expected_prev[23] !== 1'bx ) && ( READMEM_prev[23] !== READMEM_expected_prev[23] )
		&& ((READMEM_expected_prev[23] !== last_READMEM_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[23] = READMEM_expected_prev[23];
	end
	if (
		( READMEM_expected_prev[24] !== 1'bx ) && ( READMEM_prev[24] !== READMEM_expected_prev[24] )
		&& ((READMEM_expected_prev[24] !== last_READMEM_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[24] = READMEM_expected_prev[24];
	end
	if (
		( READMEM_expected_prev[25] !== 1'bx ) && ( READMEM_prev[25] !== READMEM_expected_prev[25] )
		&& ((READMEM_expected_prev[25] !== last_READMEM_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[25] = READMEM_expected_prev[25];
	end
	if (
		( READMEM_expected_prev[26] !== 1'bx ) && ( READMEM_prev[26] !== READMEM_expected_prev[26] )
		&& ((READMEM_expected_prev[26] !== last_READMEM_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[26] = READMEM_expected_prev[26];
	end
	if (
		( READMEM_expected_prev[27] !== 1'bx ) && ( READMEM_prev[27] !== READMEM_expected_prev[27] )
		&& ((READMEM_expected_prev[27] !== last_READMEM_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[27] = READMEM_expected_prev[27];
	end
	if (
		( READMEM_expected_prev[28] !== 1'bx ) && ( READMEM_prev[28] !== READMEM_expected_prev[28] )
		&& ((READMEM_expected_prev[28] !== last_READMEM_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[28] = READMEM_expected_prev[28];
	end
	if (
		( READMEM_expected_prev[29] !== 1'bx ) && ( READMEM_prev[29] !== READMEM_expected_prev[29] )
		&& ((READMEM_expected_prev[29] !== last_READMEM_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[29] = READMEM_expected_prev[29];
	end
	if (
		( READMEM_expected_prev[30] !== 1'bx ) && ( READMEM_prev[30] !== READMEM_expected_prev[30] )
		&& ((READMEM_expected_prev[30] !== last_READMEM_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[30] = READMEM_expected_prev[30];
	end
	if (
		( READMEM_expected_prev[31] !== 1'bx ) && ( READMEM_prev[31] !== READMEM_expected_prev[31] )
		&& ((READMEM_expected_prev[31] !== last_READMEM_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READMEM[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READMEM_expected_prev);
		$display ("     Real value = %b", READMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_READMEM_exp[31] = READMEM_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module memory_mapped_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] ADDRESS;
reg clock;
reg [31:0] INPUT1;
reg [31:0] INPUT2;
reg MEMORY_mapped_IO_INPUT;
reg reset;
reg [31:0] WDATA;
// wires                                               
wire [31:0] OUTSig1;
wire [31:0] OUTSig2;
wire [31:0] READMEM;

wire sampler;                             

// assign statements (if any)                          
memory_mapped i1 (
// port map - connection between master ports and signals/registers   
	.ADDRESS(ADDRESS),
	.clock(clock),
	.INPUT1(INPUT1),
	.INPUT2(INPUT2),
	.MEMORY_mapped_IO_INPUT(MEMORY_mapped_IO_INPUT),
	.OUTSig1(OUTSig1),
	.OUTSig2(OUTSig2),
	.READMEM(READMEM),
	.reset(reset),
	.WDATA(WDATA)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #30000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// ADDRESS[ 31 ]
initial
begin
	ADDRESS[31] = 1'b0;
	ADDRESS[31] = #50000 1'b1;
	ADDRESS[31] = #470000 1'b0;
end 
// ADDRESS[ 30 ]
initial
begin
	ADDRESS[30] = 1'b0;
end 
// ADDRESS[ 29 ]
initial
begin
	ADDRESS[29] = 1'b0;
end 
// ADDRESS[ 28 ]
initial
begin
	ADDRESS[28] = 1'b0;
end 
// ADDRESS[ 27 ]
initial
begin
	ADDRESS[27] = 1'b0;
end 
// ADDRESS[ 26 ]
initial
begin
	ADDRESS[26] = 1'b0;
end 
// ADDRESS[ 25 ]
initial
begin
	ADDRESS[25] = 1'b0;
end 
// ADDRESS[ 24 ]
initial
begin
	ADDRESS[24] = 1'b0;
end 
// ADDRESS[ 23 ]
initial
begin
	ADDRESS[23] = 1'b0;
end 
// ADDRESS[ 22 ]
initial
begin
	ADDRESS[22] = 1'b0;
end 
// ADDRESS[ 21 ]
initial
begin
	ADDRESS[21] = 1'b0;
end 
// ADDRESS[ 20 ]
initial
begin
	ADDRESS[20] = 1'b0;
end 
// ADDRESS[ 19 ]
initial
begin
	ADDRESS[19] = 1'b0;
end 
// ADDRESS[ 18 ]
initial
begin
	ADDRESS[18] = 1'b0;
end 
// ADDRESS[ 17 ]
initial
begin
	ADDRESS[17] = 1'b0;
end 
// ADDRESS[ 16 ]
initial
begin
	ADDRESS[16] = 1'b0;
end 
// ADDRESS[ 15 ]
initial
begin
	ADDRESS[15] = 1'b0;
end 
// ADDRESS[ 14 ]
initial
begin
	ADDRESS[14] = 1'b0;
end 
// ADDRESS[ 13 ]
initial
begin
	ADDRESS[13] = 1'b0;
end 
// ADDRESS[ 12 ]
initial
begin
	ADDRESS[12] = 1'b0;
end 
// ADDRESS[ 11 ]
initial
begin
	ADDRESS[11] = 1'b0;
end 
// ADDRESS[ 10 ]
initial
begin
	ADDRESS[10] = 1'b0;
end 
// ADDRESS[ 9 ]
initial
begin
	ADDRESS[9] = 1'b0;
end 
// ADDRESS[ 8 ]
initial
begin
	ADDRESS[8] = 1'b0;
end 
// ADDRESS[ 7 ]
initial
begin
	ADDRESS[7] = 1'b0;
end 
// ADDRESS[ 6 ]
initial
begin
	ADDRESS[6] = 1'b0;
end 
// ADDRESS[ 5 ]
initial
begin
	ADDRESS[5] = 1'b0;
end 
// ADDRESS[ 4 ]
initial
begin
	ADDRESS[4] = 1'b0;
end 
// ADDRESS[ 3 ]
initial
begin
	ADDRESS[3] = 1'b0;
end 
// ADDRESS[ 2 ]
initial
begin
	ADDRESS[2] = 1'b0;
end 
// ADDRESS[ 1 ]
initial
begin
	ADDRESS[1] = 1'b0;
	ADDRESS[1] = #270000 1'b1;
	ADDRESS[1] = #250000 1'b0;
end 
// ADDRESS[ 0 ]
initial
begin
	ADDRESS[0] = 1'b0;
	ADDRESS[0] = #160000 1'b1;
	ADDRESS[0] = #110000 1'b0;
	ADDRESS[0] = #120000 1'b1;
	ADDRESS[0] = #130000 1'b0;
end 
// INPUT1[ 31 ]
initial
begin
	INPUT1[31] = 1'b0;
end 
// INPUT1[ 30 ]
initial
begin
	INPUT1[30] = 1'b0;
end 
// INPUT1[ 29 ]
initial
begin
	INPUT1[29] = 1'b0;
end 
// INPUT1[ 28 ]
initial
begin
	INPUT1[28] = 1'b1;
end 
// INPUT1[ 27 ]
initial
begin
	INPUT1[27] = 1'b0;
end 
// INPUT1[ 26 ]
initial
begin
	INPUT1[26] = 1'b0;
end 
// INPUT1[ 25 ]
initial
begin
	INPUT1[25] = 1'b1;
end 
// INPUT1[ 24 ]
initial
begin
	INPUT1[24] = 1'b0;
end 
// INPUT1[ 23 ]
initial
begin
	INPUT1[23] = 1'b1;
end 
// INPUT1[ 22 ]
initial
begin
	INPUT1[22] = 1'b0;
end 
// INPUT1[ 21 ]
initial
begin
	INPUT1[21] = 1'b1;
end 
// INPUT1[ 20 ]
initial
begin
	INPUT1[20] = 1'b1;
end 
// INPUT1[ 19 ]
initial
begin
	INPUT1[19] = 1'b0;
end 
// INPUT1[ 18 ]
initial
begin
	INPUT1[18] = 1'b1;
end 
// INPUT1[ 17 ]
initial
begin
	INPUT1[17] = 1'b0;
end 
// INPUT1[ 16 ]
initial
begin
	INPUT1[16] = 1'b0;
end 
// INPUT1[ 15 ]
initial
begin
	INPUT1[15] = 1'b0;
end 
// INPUT1[ 14 ]
initial
begin
	INPUT1[14] = 1'b0;
end 
// INPUT1[ 13 ]
initial
begin
	INPUT1[13] = 1'b1;
end 
// INPUT1[ 12 ]
initial
begin
	INPUT1[12] = 1'b0;
end 
// INPUT1[ 11 ]
initial
begin
	INPUT1[11] = 1'b1;
end 
// INPUT1[ 10 ]
initial
begin
	INPUT1[10] = 1'b0;
end 
// INPUT1[ 9 ]
initial
begin
	INPUT1[9] = 1'b0;
end 
// INPUT1[ 8 ]
initial
begin
	INPUT1[8] = 1'b1;
end 
// INPUT1[ 7 ]
initial
begin
	INPUT1[7] = 1'b1;
end 
// INPUT1[ 6 ]
initial
begin
	INPUT1[6] = 1'b0;
end 
// INPUT1[ 5 ]
initial
begin
	INPUT1[5] = 1'b1;
end 
// INPUT1[ 4 ]
initial
begin
	INPUT1[4] = 1'b1;
end 
// INPUT1[ 3 ]
initial
begin
	INPUT1[3] = 1'b1;
end 
// INPUT1[ 2 ]
initial
begin
	INPUT1[2] = 1'b0;
end 
// INPUT1[ 1 ]
initial
begin
	INPUT1[1] = 1'b1;
end 
// INPUT1[ 0 ]
initial
begin
	INPUT1[0] = 1'b0;
end 
// INPUT2[ 31 ]
initial
begin
	INPUT2[31] = 1'b0;
end 
// INPUT2[ 30 ]
initial
begin
	INPUT2[30] = 1'b0;
end 
// INPUT2[ 29 ]
initial
begin
	INPUT2[29] = 1'b0;
end 
// INPUT2[ 28 ]
initial
begin
	INPUT2[28] = 1'b0;
end 
// INPUT2[ 27 ]
initial
begin
	INPUT2[27] = 1'b0;
end 
// INPUT2[ 26 ]
initial
begin
	INPUT2[26] = 1'b0;
end 
// INPUT2[ 25 ]
initial
begin
	INPUT2[25] = 1'b0;
end 
// INPUT2[ 24 ]
initial
begin
	INPUT2[24] = 1'b0;
end 
// INPUT2[ 23 ]
initial
begin
	INPUT2[23] = 1'b1;
end 
// INPUT2[ 22 ]
initial
begin
	INPUT2[22] = 1'b0;
end 
// INPUT2[ 21 ]
initial
begin
	INPUT2[21] = 1'b1;
end 
// INPUT2[ 20 ]
initial
begin
	INPUT2[20] = 1'b0;
end 
// INPUT2[ 19 ]
initial
begin
	INPUT2[19] = 1'b1;
end 
// INPUT2[ 18 ]
initial
begin
	INPUT2[18] = 1'b0;
end 
// INPUT2[ 17 ]
initial
begin
	INPUT2[17] = 1'b1;
end 
// INPUT2[ 16 ]
initial
begin
	INPUT2[16] = 1'b0;
end 
// INPUT2[ 15 ]
initial
begin
	INPUT2[15] = 1'b1;
end 
// INPUT2[ 14 ]
initial
begin
	INPUT2[14] = 1'b1;
end 
// INPUT2[ 13 ]
initial
begin
	INPUT2[13] = 1'b1;
end 
// INPUT2[ 12 ]
initial
begin
	INPUT2[12] = 1'b0;
end 
// INPUT2[ 11 ]
initial
begin
	INPUT2[11] = 1'b0;
end 
// INPUT2[ 10 ]
initial
begin
	INPUT2[10] = 1'b1;
end 
// INPUT2[ 9 ]
initial
begin
	INPUT2[9] = 1'b1;
end 
// INPUT2[ 8 ]
initial
begin
	INPUT2[8] = 1'b1;
end 
// INPUT2[ 7 ]
initial
begin
	INPUT2[7] = 1'b0;
end 
// INPUT2[ 6 ]
initial
begin
	INPUT2[6] = 1'b1;
end 
// INPUT2[ 5 ]
initial
begin
	INPUT2[5] = 1'b1;
end 
// INPUT2[ 4 ]
initial
begin
	INPUT2[4] = 1'b1;
end 
// INPUT2[ 3 ]
initial
begin
	INPUT2[3] = 1'b1;
end 
// INPUT2[ 2 ]
initial
begin
	INPUT2[2] = 1'b0;
end 
// INPUT2[ 1 ]
initial
begin
	INPUT2[1] = 1'b1;
end 
// INPUT2[ 0 ]
initial
begin
	INPUT2[0] = 1'b0;
end 

// MEMORY_mapped_IO_INPUT
initial
begin
	MEMORY_mapped_IO_INPUT = 1'b0;
end 
// WDATA[ 31 ]
initial
begin
	WDATA[31] = 1'b0;
end 
// WDATA[ 30 ]
initial
begin
	WDATA[30] = 1'b1;
end 
// WDATA[ 29 ]
initial
begin
	WDATA[29] = 1'b1;
end 
// WDATA[ 28 ]
initial
begin
	WDATA[28] = 1'b0;
end 
// WDATA[ 27 ]
initial
begin
	WDATA[27] = 1'b1;
end 
// WDATA[ 26 ]
initial
begin
	WDATA[26] = 1'b0;
end 
// WDATA[ 25 ]
initial
begin
	WDATA[25] = 1'b1;
end 
// WDATA[ 24 ]
initial
begin
	WDATA[24] = 1'b0;
end 
// WDATA[ 23 ]
initial
begin
	WDATA[23] = 1'b1;
end 
// WDATA[ 22 ]
initial
begin
	WDATA[22] = 1'b1;
end 
// WDATA[ 21 ]
initial
begin
	WDATA[21] = 1'b0;
end 
// WDATA[ 20 ]
initial
begin
	WDATA[20] = 1'b0;
end 
// WDATA[ 19 ]
initial
begin
	WDATA[19] = 1'b0;
end 
// WDATA[ 18 ]
initial
begin
	WDATA[18] = 1'b1;
end 
// WDATA[ 17 ]
initial
begin
	WDATA[17] = 1'b0;
end 
// WDATA[ 16 ]
initial
begin
	WDATA[16] = 1'b0;
end 
// WDATA[ 15 ]
initial
begin
	WDATA[15] = 1'b0;
end 
// WDATA[ 14 ]
initial
begin
	WDATA[14] = 1'b1;
end 
// WDATA[ 13 ]
initial
begin
	WDATA[13] = 1'b0;
end 
// WDATA[ 12 ]
initial
begin
	WDATA[12] = 1'b0;
end 
// WDATA[ 11 ]
initial
begin
	WDATA[11] = 1'b1;
end 
// WDATA[ 10 ]
initial
begin
	WDATA[10] = 1'b0;
end 
// WDATA[ 9 ]
initial
begin
	WDATA[9] = 1'b1;
end 
// WDATA[ 8 ]
initial
begin
	WDATA[8] = 1'b0;
end 
// WDATA[ 7 ]
initial
begin
	WDATA[7] = 1'b1;
end 
// WDATA[ 6 ]
initial
begin
	WDATA[6] = 1'b0;
end 
// WDATA[ 5 ]
initial
begin
	WDATA[5] = 1'b0;
end 
// WDATA[ 4 ]
initial
begin
	WDATA[4] = 1'b1;
end 
// WDATA[ 3 ]
initial
begin
	WDATA[3] = 1'b0;
end 
// WDATA[ 2 ]
initial
begin
	WDATA[2] = 1'b0;
end 
// WDATA[ 1 ]
initial
begin
	WDATA[1] = 1'b1;
end 
// WDATA[ 0 ]
initial
begin
	WDATA[0] = 1'b0;
end 

memory_mapped_vlg_sample_tst tb_sample (
	.ADDRESS(ADDRESS),
	.clock(clock),
	.INPUT1(INPUT1),
	.INPUT2(INPUT2),
	.MEMORY_mapped_IO_INPUT(MEMORY_mapped_IO_INPUT),
	.reset(reset),
	.WDATA(WDATA),
	.sampler_tx(sampler)
);

memory_mapped_vlg_check_tst tb_out(
	.OUTSig1(OUTSig1),
	.OUTSig2(OUTSig2),
	.READMEM(READMEM),
	.sampler_rx(sampler)
);
endmodule

